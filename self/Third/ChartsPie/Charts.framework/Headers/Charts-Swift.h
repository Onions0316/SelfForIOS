// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreGraphics;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum ChartEasingOption : NSInteger;
@protocol ChartAnimatorDelegate;

SWIFT_CLASS_NAMED("Animator")
@interface ChartAnimator : NSObject
@property (nonatomic, weak) id <ChartAnimatorDelegate> _Nullable delegate;
@property (nonatomic, copy) void (^ _Nullable updateBlock)(void);
@property (nonatomic, copy) void (^ _Nullable stopBlock)(void);

/// the phase that is animated and influences the drawn values on the x-axis
@property (nonatomic) double phaseX;

/// the phase that is animated and influences the drawn values on the y-axis
@property (nonatomic) double phaseY;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)stop;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingX an easing function for the animation on the x axis
///
/// \param easingY an easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingX:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easingX easingY:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easingY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOptionX the easing function for the animation on the x axis
///
/// \param easingOptionY the easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOptionX:(enum ChartEasingOption)easingOptionX easingOptionY:(enum ChartEasingOption)easingOptionY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easing an easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration;
@end


SWIFT_PROTOCOL_NAMED("AnimatorDelegate")
@protocol ChartAnimatorDelegate

/// Called when the Animator has stepped.
- (void)animatorUpdated:(ChartAnimator * _Nonnull)chartAnimator;

/// Called when the Animator has stopped.
- (void)animatorStopped:(ChartAnimator * _Nonnull)chartAnimator;
@end



/// This class encapsulates everything both Axis, Legend and LimitLines have in common
SWIFT_CLASS_NAMED("ComponentBase")
@interface ChartComponentBase : NSObject

/// flag that indicates if this component is enabled or not
@property (nonatomic) BOOL enabled;

/// Sets the used x-axis offset for the labels on this axis. default: 5.0
@property (nonatomic) CGFloat xOffset;

/// Sets the used y-axis offset for the labels on this axis. default: 5.0 (or 0.0 on ChartYAxis)
@property (nonatomic) CGFloat yOffset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isEnabled;
@end

@class UIFont;
@class UIColor;
@protocol IChartAxisValueFormatter;
@class ChartLimitLine;


/// Base class for all axes
SWIFT_CLASS_NAMED("AxisBase")
@interface ChartAxisBase : ChartComponentBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIFont * _Nonnull labelFont;
@property (nonatomic, strong) UIColor * _Nonnull labelTextColor;
@property (nonatomic, strong) UIColor * _Nonnull axisLineColor;
@property (nonatomic) CGFloat axisLineWidth;
@property (nonatomic) CGFloat axisLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Null_unspecified axisLineDashLengths;
@property (nonatomic, strong) UIColor * _Nonnull gridColor;
@property (nonatomic) CGFloat gridLineWidth;
@property (nonatomic) CGFloat gridLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Null_unspecified gridLineDashLengths;
@property (nonatomic) CGLineCap gridLineCap;
@property (nonatomic) BOOL drawGridLinesEnabled;
@property (nonatomic) BOOL drawAxisLineEnabled;

/// flag that indicates of the labels of this axis should be drawn or not
@property (nonatomic) BOOL drawLabelsEnabled;
@property (nonatomic) BOOL centerAxisLabelsEnabled;
@property (nonatomic, readonly) BOOL isCenterAxisLabelsEnabled;

/// Are the LimitLines drawn behind the data or in front of the data?
///
/// <em>default</em>: false
@property (nonatomic) BOOL drawLimitLinesBehindDataEnabled;

/// the flag can be used to turn off the antialias for grid lines
@property (nonatomic) BOOL gridAntialiasEnabled;

/// the actual array of entries
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull entries;

/// axis label entries only used for centered labels
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull centeredEntries;

/// the number of entries the legend contains
@property (nonatomic, readonly) NSInteger entryCount;

/// the number of decimal digits to use (for the default formatter
@property (nonatomic) NSInteger decimals;

/// When true, axis labels are controlled by the granularity property. When false, axis values could possibly be repeated. This could happen if two adjacent axis values are rounded to same value. If using granularity this could be avoided by having fewer axis values visible.
@property (nonatomic) BOOL granularityEnabled;

/// The minimum interval between axis values. This can be used to avoid label duplicating when zooming in.
///
/// <em>default</em>: 1.0
@property (nonatomic) double granularity;

/// The minimum interval between axis values.
@property (nonatomic, readonly) BOOL isGranularityEnabled;

/// if true, the set number of y-labels will be forced
@property (nonatomic) BOOL forceLabelsEnabled;
- (NSString * _Nonnull)getLongestLabel;

/// \returns  The formatted label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).
- (NSString * _Nonnull)getFormattedLabel:(NSInteger)index;

/// Sets the formatter to be used for formatting the axis labels. If no formatter is set, the chart will automatically determine a reasonable formatting (concerning decimals) for all the values that are drawn inside the chart. Use nil to use the formatter calculated by the chart.
@property (nonatomic, strong) id <IChartAxisValueFormatter> _Nullable valueFormatter;
@property (nonatomic, readonly) BOOL isDrawGridLinesEnabled;
@property (nonatomic, readonly) BOOL isDrawAxisLineEnabled;
@property (nonatomic, readonly) BOOL isDrawLabelsEnabled;

/// Are the LimitLines drawn behind the data or in front of the data?
///
/// <em>default</em>: false
@property (nonatomic, readonly) BOOL isDrawLimitLinesBehindDataEnabled;

/// the total range of values this axis covers
@property (nonatomic) double axisRange;

/// the number of label entries the y-axis should have max = 25, min = 2, default = 6, be aware that this number is not fixed and can only be approximated
@property (nonatomic) NSInteger labelCount;
- (void)setLabelCount:(NSInteger)count force:(BOOL)force;

/// \returns  <code>true
/// </code> if focing the y-label count is enabled. Default: false
@property (nonatomic, readonly) BOOL isForceLabelsEnabled;

/// Adds a new ChartLimitLine to this axis.
- (void)addLimitLine:(ChartLimitLine * _Nonnull)line;

/// Removes the specified ChartLimitLine from the axis.
- (void)removeLimitLine:(ChartLimitLine * _Nonnull)line;

/// Removes all LimitLines from the axis.
- (void)removeAllLimitLines;

/// \returns  The LimitLines of this axis.
@property (nonatomic, readonly, copy) NSArray<ChartLimitLine *> * _Nonnull limitLines;

/// By calling this method, any custom minimum value that has been previously set is reseted, and the calculation is done automatically.
- (void)resetCustomAxisMin;
@property (nonatomic, readonly) BOOL isAxisMinCustom;

/// By calling this method, any custom maximum value that has been previously set is reseted, and the calculation is done automatically.
- (void)resetCustomAxisMax;
@property (nonatomic, readonly) BOOL isAxisMaxCustom;

/// This property is deprecated - Use axisMinimum instead.
@property (nonatomic) double axisMinValue;

/// This property is deprecated - Use axisMaximum instead.
@property (nonatomic) double axisMaxValue;

/// The minimum value for this axis. If set, this value will not be calculated automatically depending on the provided data. Use resetCustomAxisMin() to undo this.
@property (nonatomic) double axisMinimum;

/// The maximum value for this axis. If set, this value will not be calculated automatically depending on the provided data. Use resetCustomAxisMin() to undo this.
@property (nonatomic) double axisMaximum;

/// Calculates the minimum, maximum and range values of the YAxis with the given minimum and maximum values from the chart data.
///
/// \param dataMin the y-min value according to chart data
///
/// \param dataMax the y-max value according to chart
- (void)calculateWithMin:(double)dataMin max:(double)dataMax;
@end

@class ChartViewPortHandler;

SWIFT_CLASS_NAMED("Renderer")
@interface ChartRenderer : NSObject

/// the component that handles the drawing area of the chart and it's offsets
@property (nonatomic, strong) ChartViewPortHandler * _Nullable viewPortHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
@end

@class ChartTransformer;

SWIFT_CLASS_NAMED("AxisRendererBase")
@interface ChartAxisRendererBase : ChartRenderer

/// base axis this axis renderer works with
@property (nonatomic, strong) ChartAxisBase * _Nullable axis;

/// transformer to transform values to screen pixels and return
@property (nonatomic, strong) ChartTransformer * _Nullable transformer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler transformer:(ChartTransformer * _Nullable)transformer axis:(ChartAxisBase * _Nullable)axis OBJC_DESIGNATED_INITIALIZER;

/// Draws the axis labels on the specified context
- (void)renderAxisLabelsWithContext:(CGContextRef _Nonnull)context;

/// Draws the grid lines belonging to the axis.
- (void)renderGridLinesWithContext:(CGContextRef _Nonnull)context;

/// Draws the line that goes alongside the axis.
- (void)renderAxisLineWithContext:(CGContextRef _Nonnull)context;

/// Draws the LimitLines associated with this axis to the screen.
- (void)renderLimitLinesWithContext:(CGContextRef _Nonnull)context;

/// Computes the axis values.
///
/// \param min the minimum value in the data object for this axis
///
/// \param max the maximum value in the data object for this axis
- (void)computeAxisWithMin:(double)min max:(double)max inverted:(BOOL)inverted;

/// Sets up the axis values. Computes the desired number of labels between the two given extremes.
- (void)computeAxisValuesWithMin:(double)min max:(double)max;
@end


SWIFT_CLASS("_TtC6Charts18ChartDataEntryBase")
@interface ChartDataEntryBase : NSObject

/// the y value
@property (nonatomic) double y;

/// optional spot for additional data this Entry represents
@property (nonatomic, strong) id _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// An Entry represents one single entry in the chart.
///
/// \param y the y value (the actual value of the entry)
- (nonnull instancetype)initWithY:(double)y OBJC_DESIGNATED_INITIALIZER;

/// \param y the y value (the actual value of the entry)
///
/// \param data Space for additional data this Entry represents.
- (nonnull instancetype)initWithY:(double)y data:(id _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC6Charts14ChartDataEntry")
@interface ChartDataEntry : ChartDataEntryBase

/// the x value
@property (nonatomic) double x;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// An Entry represents one single entry in the chart.
///
/// \param x the x value
///
/// \param y the y value (the actual value of the entry)
- (nonnull instancetype)initWithX:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;

/// An Entry represents one single entry in the chart.
///
/// \param x the x value
///
/// \param y the y value (the actual value of the entry)
///
/// \param data Space for additional data this Entry represents.
- (nonnull instancetype)initWithX:(double)x y:(double)y data:(id _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end

@class ChartRange;

SWIFT_CLASS("_TtC6Charts17BarChartDataEntry")
@interface BarChartDataEntry : ChartDataEntry
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Constructor for stacked bar entries.
- (nonnull instancetype)initWithX:(double)x yValues:(NSArray<NSNumber *> * _Nonnull)yValues OBJC_DESIGNATED_INITIALIZER;

/// Constructor for normal bars (not stacked).
- (nonnull instancetype)initWithX:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;

/// Constructor for stacked bar entries.
- (nonnull instancetype)initWithX:(double)x yValues:(NSArray<NSNumber *> * _Nonnull)yValues label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// Constructor for normal bars (not stacked).
- (nonnull instancetype)initWithX:(double)x y:(double)y data:(id _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (double)getBelowSum:(NSInteger)stackIndex;

/// \returns  The sum of all negative values this entry (if stacked) contains. (this is a positive number)
@property (nonatomic, readonly) double negativeSum;

/// \returns  The sum of all positive values this entry (if stacked) contains.
@property (nonatomic, readonly) double positiveSum;
- (void)calcPosNegSum;

/// Splits up the stack-values of the given bar-entry into Range objects.
///
/// \param entry 
///
/// \returns  
- (void)calcRanges;

/// the values the stacked barchart holds
@property (nonatomic, readonly) BOOL isStacked;

/// the values the stacked barchart holds
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable yValues;

/// \returns  The ranges of the individual stack-entries. Will return null if this entry is not stacked.
@property (nonatomic, readonly, copy) NSArray<ChartRange *> * _Nullable ranges;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end

@class ChartData;

SWIFT_PROTOCOL("_TtP6Charts17ChartDataProvider_")
@protocol ChartDataProvider

/// \returns  The minimum x-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartXMin;

/// \returns  The maximum x-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartXMax;

/// \returns  The minimum y-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartYMin;

/// \returns  The maximum y-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartYMax;
@property (nonatomic, readonly) CGFloat maxHighlightDistance;
@property (nonatomic, readonly) double xRange;
@property (nonatomic, readonly) CGPoint centerOffsets;
@property (nonatomic, readonly, strong) ChartData * _Nullable data;
@property (nonatomic, readonly) NSInteger maxVisibleCount;
@end

enum AxisDependency : NSInteger;

SWIFT_PROTOCOL("_TtP6Charts43BarLineScatterCandleBubbleChartDataProvider_")
@protocol BarLineScatterCandleBubbleChartDataProvider <ChartDataProvider>
- (ChartTransformer * _Nonnull)getTransformer:(enum AxisDependency)which;
- (BOOL)isInverted:(enum AxisDependency)axis;
@property (nonatomic, readonly) double lowestVisibleX;
@property (nonatomic, readonly) double highestVisibleX;
@end

enum ChartDataSetRounding : NSInteger;
@protocol IChartValueFormatter;
enum ChartLegendForm : NSInteger;

SWIFT_PROTOCOL("_TtP6Charts13IChartDataSet_")
@protocol IChartDataSet

/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;

/// Calculates the minimum and maximum x and y values (_xMin, _xMax, _yMin, _yMax).
- (void)calcMinMax;

/// Calculates the min and max y-values from the Entry closest to the given fromX to the Entry closest to the given toX value. This is only needed for the autoScaleMinMax feature.
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;

/// \returns  The minimum y-value this DataSet holds
@property (nonatomic, readonly) double yMin;

/// \returns  The maximum y-value this DataSet holds
@property (nonatomic, readonly) double yMax;

/// \returns  The minimum x-value this DataSet holds
@property (nonatomic, readonly) double xMin;

/// \returns  The maximum x-value this DataSet holds
@property (nonatomic, readonly) double xMax;

/// \returns  The number of y-values this DataSet represents
@property (nonatomic, readonly) NSInteger entryCount;

/// \param error out of bounds
/// if <code>i
/// </code> is out of bounds, it may throw an out-of-bounds exception
///
/// \returns  The entry object found at the given index (not x-value!)
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i;

/// \param x the x-value
///
/// \param rounding determine whether to round up/down/closest if there is no Entry matching the provided x-value
///
/// \returns  The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specifed x-value is found, this method returns the Entry at the closest x-pox.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)x rounding:(enum ChartDataSetRounding)rounding;

/// \returns  The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specifed x-value is found, this method returns the Entry at the closest x-value.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)x;

/// \returns  All Entry objects found at the given x-value with binary search.
/// An empty array if no Entry object at that x-value.
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)x;

/// \param x x-value of the entry to search for
///
/// \param rounding x-value of the entry to search for
///
/// \returns  The array-index of the specified entry
- (NSInteger)entryIndexWithX:(double)x rounding:(enum ChartDataSetRounding)rounding;

/// \param e the entry to search for
///
/// \returns  The array-index of the specified entry
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e;

/// Adds an Entry to the DataSet dynamically.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// Entries are added to the end of the list.
///
/// \param e the entry to add
///
/// \returns  <code>true
/// </code> if the entry was added successfully, <code>false
/// </code> ifthis feature is not supported
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e;

/// Adds an Entry to the DataSet dynamically. Entries are added to their appropriate index in the values array respective to their x-position. This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// Entries are added to the end of the list.
///
/// \param e the entry to add
///
/// \returns  <code>true
/// </code> if the entry was added successfully, <code>false
/// </code> ifthis feature is not supported
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e;

/// Removes an Entry from the DataSet dynamically.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// \param entry the entry to remove
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, <code>false
/// </code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry;

/// Removes the Entry object at the given index in the values array from the DataSet.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// \param index the index of the entry to remove
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, <code>false
/// </code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntryWithIndex:(NSInteger)index;

/// Removes the Entry object closest to the given x-value from the DataSet.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// \param x the x-value to remove
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, <code>false
/// </code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntryWithX:(double)x;

/// Removes the first Entry (at index 0) of this DataSet from the entries array.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, <code>false
/// </code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeFirst;

/// Removes the last Entry (at index 0) of this DataSet from the entries array.
///
/// <em>optional feature, can return <code>false
/// </code> ifnot implemented</em>
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, <code>false
/// </code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeLast;

/// Checks if this DataSet contains the specified Entry.
///
/// \returns  <code>true
/// </code> if contains the entry, <code>false
/// </code> ifnot.
- (BOOL)contains:(ChartDataEntry * _Nonnull)e;

/// Removes all values from this DataSet and does all necessary recalculations.
///
/// <em>optional feature, could throw if not implemented</em>
- (void)clear;

/// The label string that describes the DataSet.
@property (nonatomic, readonly, copy) NSString * _Nullable label;

/// The axis this DataSet should be plotted against.
@property (nonatomic, readonly) enum AxisDependency axisDependency;

/// List representing all colors that are used for drawing the actual values for this DataSet
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull valueColors;

/// All the colors that are used for this DataSet. Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array.
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull colors;

/// \returns  The color at the given index of the DataSet's color array.
/// This prevents out-of-bounds by performing a modulus on the color index, so colours will repeat themselves.
- (UIColor * _Nonnull)colorAt:(NSInteger)index;
- (void)resetColors;
- (void)addColor:(UIColor * _Nonnull)color;
- (void)setColor:(UIColor * _Nonnull)color;

/// if true, value highlighting is enabled
@property (nonatomic) BOOL highlightEnabled;

/// \returns  <code>true
/// </code> if value highlighting is enabled for this dataset
@property (nonatomic, readonly) BOOL isHighlightEnabled;

/// Custom formatter that is used instead of the auto-formatter if set
@property (nonatomic, strong) id <IChartValueFormatter> _Nullable valueFormatter;

/// \returns  <code>true
/// </code> if the valueFormatter object of this DataSet is null.
@property (nonatomic, readonly) BOOL needsFormatter;

/// Sets/get a single color for value text. Setting the color clears the colors array and adds a single color. Getting will return the first color in the array.
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;

/// \returns  The color at the specified index that is used for drawing the values inside the chart. Uses modulus internally.
- (UIColor * _Nonnull)valueTextColorAt:(NSInteger)index;

/// the font for the value-text labels
@property (nonatomic, strong) UIFont * _Nonnull valueFont;

/// The form to draw for this dataset in the legend.
///
/// Return <code>.Default
/// </code> to use the default legend form.
@property (nonatomic, readonly) enum ChartLegendForm form;

/// The form size to draw for this dataset in the legend.
///
/// Return <code>NaN
/// </code> to use the default legend form size.
@property (nonatomic, readonly) CGFloat formSize;

/// The line width for drawing the form of this dataset in the legend
///
/// Return <code>NaN
/// </code> to use the default legend form line width.
@property (nonatomic, readonly) CGFloat formLineWidth;

/// Line dash configuration for legend shapes that consist of lines.
///
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic, readonly) CGFloat formLineDashPhase;

/// Line dash configuration for legend shapes that consist of lines.
///
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [--   --   ]
/// [1, 3, 4, 2] will paint [-   ----  -   ----  ]
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;

/// Set this to true to draw y-values on the chart
@property (nonatomic) BOOL drawValuesEnabled;

/// \returns  <code>true
/// </code> if y-value drawing is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawValuesEnabled;

/// Set the visibility of this DataSet. If not visible, the DataSet will not be drawn to the chart upon refreshing it.
@property (nonatomic) BOOL visible;

/// \returns  <code>true
/// </code> if this DataSet is visible inside the chart, or <code>false
/// </code> ifit is currently hidden.
@property (nonatomic, readonly) BOOL isVisible;
@end


SWIFT_PROTOCOL("_TtP6Charts39IBarLineScatterCandleBubbleChartDataSet_")
@protocol IBarLineScatterCandleBubbleChartDataSet <IChartDataSet>
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable highlightLineDashLengths;
@end


SWIFT_CLASS("_TtC6Charts16ChartBaseDataSet")
@interface ChartBaseDataSet : NSObject <IChartDataSet>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;

/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;
- (void)calcMinMax;
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;
@property (nonatomic, readonly) double yMin;
@property (nonatomic, readonly) double yMax;
@property (nonatomic, readonly) double xMin;
@property (nonatomic, readonly) double xMax;
@property (nonatomic, readonly) NSInteger entryCount;
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i;
- (ChartDataEntry * _Nullable)entryForXValue:(double)x rounding:(enum ChartDataSetRounding)rounding;
- (ChartDataEntry * _Nullable)entryForXValue:(double)x;
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)x;
- (NSInteger)entryIndexWithX:(double)x rounding:(enum ChartDataSetRounding)rounding;
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e;
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e;
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e;
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry;
- (BOOL)removeEntryWithIndex:(NSInteger)index;
- (BOOL)removeEntryWithX:(double)x;
- (BOOL)removeFirst;
- (BOOL)removeLast;
- (BOOL)contains:(ChartDataEntry * _Nonnull)e;
- (void)clear;

/// All the colors that are used for this DataSet. Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull colors;

/// List representing all colors that are used for drawing the actual values for this DataSet
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull valueColors;

/// The label string that describes the DataSet.
@property (nonatomic, copy) NSString * _Nullable label;

/// The axis this DataSet should be plotted against.
@property (nonatomic) enum AxisDependency axisDependency;

/// \returns  The color at the given index of the DataSet's color array.
/// This prevents out-of-bounds by performing a modulus on the color index, so colours will repeat themselves.
- (UIColor * _Nonnull)colorAt:(NSInteger)index;

/// Resets all colors of this DataSet and recreates the colors array.
- (void)resetColors;

/// Adds a new color to the colors array of the DataSet.
///
/// \param color the color to add
- (void)addColor:(UIColor * _Nonnull)color;

/// Sets the one and only color that should be used for this DataSet. Internally, this recreates the colors array and adds the specified color.
///
/// \param color the color to set
- (void)setColor:(UIColor * _Nonnull)color;

/// Sets colors to a single color a specific alpha value.
///
/// \param color the color to set
///
/// \param alpha alpha to apply to the set <code>color
/// </code>
- (void)setColor:(UIColor * _Nonnull)color alpha:(CGFloat)alpha;

/// Sets colors with a specific alpha value.
///
/// \param colors the colors to set
///
/// \param alpha alpha to apply to the set <code>colors
/// </code>
- (void)setColors:(NSArray<UIColor *> * _Nonnull)colors alpha:(CGFloat)alpha;

/// if true, value highlighting is enabled
@property (nonatomic) BOOL highlightEnabled;

/// \returns  <code>true
/// </code> if value highlighting is enabled for this dataset
@property (nonatomic, readonly) BOOL isHighlightEnabled;

/// Custom formatter that is used instead of the auto-formatter if set
@property (nonatomic, strong) id <IChartValueFormatter> _Nullable valueFormatter;
@property (nonatomic, readonly) BOOL needsFormatter;

/// Sets/get a single color for value text. Setting the color clears the colors array and adds a single color. Getting will return the first color in the array.
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;

/// \returns  The color at the specified index that is used for drawing the values inside the chart. Uses modulus internally.
- (UIColor * _Nonnull)valueTextColorAt:(NSInteger)index;

/// the font for the value-text labels
@property (nonatomic, strong) UIFont * _Nonnull valueFont;

/// The form to draw for this dataset in the legend.
@property (nonatomic) enum ChartLegendForm form;

/// The form size to draw for this dataset in the legend.
///
/// Return <code>NaN
/// </code> to use the default legend form size.
@property (nonatomic) CGFloat formSize;

/// The line width for drawing the form of this dataset in the legend
///
/// Return <code>NaN
/// </code> to use the default legend form line width.
@property (nonatomic) CGFloat formLineWidth;

/// Line dash configuration for legend shapes that consist of lines.
///
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic) CGFloat formLineDashPhase;

/// Line dash configuration for legend shapes that consist of lines.
///
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [--   --   ]
/// [1, 3, 4, 2] will paint [-   ----  -   ----  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;

/// Set this to true to draw y-values on the chart
@property (nonatomic) BOOL drawValuesEnabled;

/// \returns  <code>true
/// </code> if y-value drawing is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawValuesEnabled;

/// Set the visibility of this DataSet. If not visible, the DataSet will not be drawn to the chart upon refreshing it.
@property (nonatomic) BOOL visible;

/// \returns  <code>true
/// </code> if this DataSet is visible inside the chart, or <code>false
/// </code> ifit is currently hidden.
@property (nonatomic, readonly) BOOL isVisible;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end



/// The DataSet class represents one group or type of entries (Entry) in the Chart that belong together. It is designed to logically separate different groups of values inside the Chart (e.g. the values for a specific line in the LineChart, or the values of a specific group of bars in the BarChart).
SWIFT_CLASS("_TtC6Charts12ChartDataSet")
@interface ChartDataSet : ChartBaseDataSet
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values;

/// <ul><li></li></ul>\Note 
/// Calls <code>notifyDataSetChanged()
/// </code> after setting a new value.
///
/// \returns  The array of y-values that this DataSet represents.
@property (nonatomic, copy) NSArray<ChartDataEntry *> * _Nonnull values;

/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;
- (void)calcMinMax;
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;
- (void)calcMinMaxXWithEntry:(ChartDataEntry * _Nonnull)e;

/// \returns  The minimum y-value this DataSet holds
@property (nonatomic, readonly) double yMin;

/// \returns  The maximum y-value this DataSet holds
@property (nonatomic, readonly) double yMax;

/// \returns  The minimum x-value this DataSet holds
@property (nonatomic, readonly) double xMin;

/// \returns  The maximum x-value this DataSet holds
@property (nonatomic, readonly) double xMax;

/// \returns  The number of y-values this DataSet represents
@property (nonatomic, readonly) NSInteger entryCount;

/// \param error out of bounds
/// if <code>i
/// </code> is out of bounds, it may throw an out-of-bounds exception
///
/// \returns  The entry object found at the given index (not x-value!)
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i;

/// \param x the x-value
///
/// \param rounding determine whether to round up/down/closest if there is no Entry matching the provided x-value
///
/// \returns  The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specifed x-value is found, this method returns the Entry at the closest x-value.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)x rounding:(enum ChartDataSetRounding)rounding;

/// \returns  The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specifed x-value is found, this method returns the Entry at the closest x-value.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)x;

/// \returns  All Entry objects found at the given xIndex with binary search.
/// An empty array if no Entry object at that index.
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)x;

/// \param x x-index of the entry to search for
///
/// \param rounding x-index of the entry to search for
///
/// \returns  The array-index of the specified entry
- (NSInteger)entryIndexWithX:(double)xValue rounding:(enum ChartDataSetRounding)rounding;

/// \param e the entry to search for
///
/// \returns  The array-index of the specified entry
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e;

/// Adds an Entry to the DataSet dynamically. Entries are added to the end of the list. This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.
///
/// \param e the entry to add
///
/// \returns  True
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e;

/// Adds an Entry to the DataSet dynamically. Entries are added to their appropriate index respective to it's x-index. This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.
///
/// \param e the entry to add
///
/// \returns  True
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e;

/// Removes an Entry from the DataSet dynamically. This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.
///
/// \param entry the entry to remove
///
/// \returns  <code>true
/// </code> if the entry was removed successfully, else if the entry does not exist
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry;

/// Removes the first Entry (at index 0) of this DataSet from the entries array.
///
/// \returns  <code>true
/// </code> if successful, <code>false
/// </code> ifnot.
- (BOOL)removeFirst;

/// Removes the last Entry (at index size-1) of this DataSet from the entries array.
///
/// \returns  <code>true
/// </code> if successful, <code>false
/// </code> ifnot.
- (BOOL)removeLast;

/// Checks if this DataSet contains the specified Entry.
///
/// \returns  <code>true
/// </code> if contains the entry, <code>false
/// </code> ifnot.
- (BOOL)contains:(ChartDataEntry * _Nonnull)e;

/// Removes all values from this DataSet and recalculates min and max value.
- (void)clear;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts38BarLineScatterCandleBubbleChartDataSet")
@interface BarLineScatterCandleBubbleChartDataSet : ChartDataSet <IBarLineScatterCandleBubbleChartDataSet>
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable highlightLineDashLengths;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
@end

@class ChartHighlight;

SWIFT_CLASS_NAMED("DataRenderer")
@interface ChartDataRendererBase : ChartRenderer
@property (nonatomic, strong) ChartAnimator * _Nullable animator;
- (nonnull instancetype)initWithAnimator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;

/// Draws all highlight indicators for the values that are currently highlighted.
///
/// \param indices the highlighted values
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<ChartHighlight *> * _Nonnull)indices;

/// An opportunity for initializing internal buffers used for rendering with a new size. Since this might do memory allocations, it should only be called if necessary.
- (void)initBuffers;
- (BOOL)isDrawingValuesAllowedWithDataProvider:(id <ChartDataProvider> _Nullable)dataProvider;
@end


SWIFT_CLASS_NAMED("BarLineScatterCandleBubbleRenderer")
@interface BarLineScatterCandleBubbleChartRenderer : ChartDataRendererBase
- (nonnull instancetype)initWithAnimator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Charts9ChartData")
@interface ChartData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSets:(NSArray<id <IChartDataSet>> * _Nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSet:(id <IChartDataSet> _Nullable)dataSet;

/// Call this method to let the ChartData know that the underlying data has changed. Calling this performs all necessary recalculations needed when the contained data has changed.
- (void)notifyDataChanged;
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;

/// calc minimum and maximum y value over all datasets
- (void)calcMinMax;

/// Adjusts the current minimum and maximum values based on the provided Entry object.
- (void)calcMinMaxWithEntry:(ChartDataEntry * _Nonnull)e axis:(enum AxisDependency)axis;

/// Adjusts the minimum and maximum values based on the given DataSet.
- (void)calcMinMaxWithDataSet:(id <IChartDataSet> _Nonnull)d;

/// \returns  The number of LineDataSets this object contains
@property (nonatomic, readonly) NSInteger dataSetCount;

/// \returns  The smallest y-value the data object contains.
@property (nonatomic, readonly) double yMin;
- (double)getYMin:(enum AxisDependency)axis;

/// \returns  The greatest y-value the data object contains.
@property (nonatomic, readonly) double yMax;
- (double)getYMax:(enum AxisDependency)axis;

/// \returns  The minimum x-value the data object contains.
@property (nonatomic, readonly) double xMin;

/// \returns  The maximum x-value the data object contains.
@property (nonatomic, readonly) double xMax;

/// \returns  All DataSet objects this ChartData object holds.
@property (nonatomic, copy) NSArray<id <IChartDataSet>> * _Nonnull dataSets;

/// Get the Entry for a corresponding highlight object
///
/// \param highlight 
///
/// \returns  The entry that is highlighted
- (ChartDataEntry * _Nullable)entryForHighlight:(ChartHighlight * _Nonnull)highlight;

/// IMPORTANT: This method does calculations at runtime. Use with care in performance critical situations.
///
/// \param label 
///
/// \param ignorecase 
///
/// \returns  The DataSet Object with the given label. Sensitive or not.
- (id <IChartDataSet> _Nullable)getDataSetByLabel:(NSString * _Nonnull)label ignorecase:(BOOL)ignorecase;
- (id <IChartDataSet> _Null_unspecified)getDataSetByIndex:(NSInteger)index;
- (void)addDataSet:(id <IChartDataSet> _Null_unspecified)d;

/// Removes the given DataSet from this data object. Also recalculates all minimum and maximum values.
///
/// \returns  <code>true
/// </code> if a DataSet was removed, <code>false
/// </code> ifno DataSet could be removed.
- (BOOL)removeDataSet:(id <IChartDataSet> _Null_unspecified)dataSet;

/// Removes the DataSet at the given index in the DataSet array from the data object. Also recalculates all minimum and maximum values.
///
/// \returns  <code>true
/// </code> if a DataSet was removed, <code>false
/// </code> ifno DataSet could be removed.
- (BOOL)removeDataSetByIndex:(NSInteger)index;

/// Adds an Entry to the DataSet at the specified index. Entries are added to the end of the list.
- (void)addEntry:(ChartDataEntry * _Nonnull)e dataSetIndex:(NSInteger)dataSetIndex;

/// Removes the given Entry object from the DataSet at the specified index.
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;

/// Removes the Entry object closest to the given xIndex from the ChartDataSet at the specified index.
///
/// \returns  <code>true
/// </code> if an entry was removed, <code>false
/// </code> ifno Entry was found that meets the specified requirements.
- (BOOL)removeEntryWithXValue:(double)xValue dataSetIndex:(NSInteger)dataSetIndex;

/// \returns  The DataSet that contains the provided Entry, or null, if no DataSet contains this entry.
- (id <IChartDataSet> _Nullable)getDataSetForEntry:(ChartDataEntry * _Null_unspecified)e;

/// \returns  The index of the provided DataSet in the DataSet array of this data object, or -1 if it does not exist.
- (NSInteger)indexOfDataSet:(id <IChartDataSet> _Nonnull)dataSet;

/// \returns  The first DataSet from the datasets-array that has it's dependency on the left axis. Returns null if no DataSet with left dependency could be found.
- (id <IChartDataSet> _Nullable)getFirstLeftWithDataSets:(NSArray<id <IChartDataSet>> * _Nonnull)dataSets;

/// \returns  The first DataSet from the datasets-array that has it's dependency on the right axis. Returns null if no DataSet with right dependency could be found.
- (id <IChartDataSet> _Nullable)getFirstRightWithDataSets:(NSArray<id <IChartDataSet>> * _Nonnull)dataSets;

/// \returns  All colors used across all DataSet objects this object represents.
- (NSArray<UIColor *> * _Nullable)getColors;

/// Sets a custom IValueFormatter for all DataSets this data object contains.
- (void)setValueFormatter:(id <IChartValueFormatter> _Nullable)formatter;

/// Sets the color of the value-text (color in which the value-labels are drawn) for all DataSets this data object contains.
- (void)setValueTextColor:(UIColor * _Null_unspecified)color;

/// Sets the font for all value-labels for all DataSets this data object contains.
- (void)setValueFont:(UIFont * _Null_unspecified)font;

/// Enables / disables drawing values (value-text) for all DataSets this data object contains.
- (void)setDrawValues:(BOOL)enabled;

/// Enables / disables highlighting values for all DataSets this data object contains. If set to true, this means that values can be highlighted programmatically or by touch gesture.
@property (nonatomic) BOOL highlightEnabled;

/// if true, value highlightning is enabled
@property (nonatomic, readonly) BOOL isHighlightEnabled;

/// Clears this data object from all DataSets and removes all Entries. Don't forget to invalidate the chart after this.
- (void)clearValues;

/// Checks if this data object contains the specified DataSet.
///
/// \returns  <code>true
/// </code> if so, <code>false
/// </code> ifnot.
- (BOOL)containsWithDataSet:(id <IChartDataSet> _Nonnull)dataSet;

/// \returns  The total entry count across all DataSet objects this data object contains.
@property (nonatomic, readonly) NSInteger entryCount;

/// \returns  The DataSet object with the maximum number of entries or null if there are no DataSets.
@property (nonatomic, readonly, strong) id <IChartDataSet> _Nullable maxEntryCountSet;
@end






/// Determines how to round DataSet index values for ChartDataSet.entryIndex(x, rounding) when an exact x-value is not found.
typedef SWIFT_ENUM(NSInteger, ChartDataSetRounding) {
  ChartDataSetRoundingUp = 0,
  ChartDataSetRoundingDown = 1,
  ChartDataSetRoundingClosest = 2,
};

typedef SWIFT_ENUM(NSInteger, ChartEasingOption) {
  ChartEasingOptionLinear = 0,
  ChartEasingOptionEaseInQuad = 1,
  ChartEasingOptionEaseOutQuad = 2,
  ChartEasingOptionEaseInOutQuad = 3,
  ChartEasingOptionEaseInCubic = 4,
  ChartEasingOptionEaseOutCubic = 5,
  ChartEasingOptionEaseInOutCubic = 6,
  ChartEasingOptionEaseInQuart = 7,
  ChartEasingOptionEaseOutQuart = 8,
  ChartEasingOptionEaseInOutQuart = 9,
  ChartEasingOptionEaseInQuint = 10,
  ChartEasingOptionEaseOutQuint = 11,
  ChartEasingOptionEaseInOutQuint = 12,
  ChartEasingOptionEaseInSine = 13,
  ChartEasingOptionEaseOutSine = 14,
  ChartEasingOptionEaseInOutSine = 15,
  ChartEasingOptionEaseInExpo = 16,
  ChartEasingOptionEaseOutExpo = 17,
  ChartEasingOptionEaseInOutExpo = 18,
  ChartEasingOptionEaseInCirc = 19,
  ChartEasingOptionEaseOutCirc = 20,
  ChartEasingOptionEaseInOutCirc = 21,
  ChartEasingOptionEaseInElastic = 22,
  ChartEasingOptionEaseOutElastic = 23,
  ChartEasingOptionEaseInOutElastic = 24,
  ChartEasingOptionEaseInBack = 25,
  ChartEasingOptionEaseOutBack = 26,
  ChartEasingOptionEaseInOutBack = 27,
  ChartEasingOptionEaseInBounce = 28,
  ChartEasingOptionEaseOutBounce = 29,
  ChartEasingOptionEaseInOutBounce = 30,
};


SWIFT_PROTOCOL_NAMED("IHighlighter")
@protocol IChartHighlighter <NSObject>

/// \param x 
///
/// \param y 
///
/// \returns  
- (ChartHighlight * _Nullable)getHighlightWithX:(CGFloat)x y:(CGFloat)y;
@end


SWIFT_CLASS("_TtC6Charts16ChartHighlighter")
@interface ChartHighlighter : NSObject <IChartHighlighter>

/// instance of the data-provider
@property (nonatomic, weak) id <ChartDataProvider> _Nullable chart;
- (nonnull instancetype)initWithChart:(id <ChartDataProvider> _Nonnull)chart OBJC_DESIGNATED_INITIALIZER;
- (ChartHighlight * _Nullable)getHighlightWithX:(CGFloat)x y:(CGFloat)y;

/// \param x 
///
/// \returns  
- (CGPoint)getValsForTouchWithX:(CGFloat)x y:(CGFloat)y;

/// \param xValue 
///
/// \param x 
///
/// \param y 
///
/// \returns  
- (ChartHighlight * _Nullable)getHighlightWithXValue:(double)xVal x:(CGFloat)x y:(CGFloat)y;

/// \param xValue the transformed x-value of the x-touch position
///
/// \param x touch position
///
/// \param y touch position
///
/// \returns  
- (NSArray<ChartHighlight *> * _Nonnull)getHighlightsWithXValue:(double)xValue x:(CGFloat)x y:(CGFloat)y;
@end

enum ChartLimitLabelPosition : NSInteger;


/// The limit line is an additional feature for all Line, Bar and ScatterCharts. It allows the displaying of an additional line in the chart that marks a certain maximum / limit on the specified axis (x- or y-axis).
SWIFT_CLASS("_TtC6Charts14ChartLimitLine")
@interface ChartLimitLine : ChartComponentBase

/// limit / maximum (the y-value or xIndex)
@property (nonatomic) double limit;
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
@property (nonatomic) CGFloat lineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDashLengths;
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic) BOOL drawLabelEnabled;
@property (nonatomic) enum ChartLimitLabelPosition labelPosition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLimit:(double)limit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLimit:(double)limit label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// set the line width of the chart (min = 0.2, max = 12); default 2
@property (nonatomic) CGFloat lineWidth;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLimitLabelPosition, "LabelPosition") {
  ChartLimitLabelPositionLeftTop = 0,
  ChartLimitLabelPositionLeftBottom = 1,
  ChartLimitLabelPositionRightTop = 2,
  ChartLimitLabelPositionRightBottom = 3,
};

@class UITouch;
@class UIEvent;
@class NSCoder;

SWIFT_CLASS("_TtC6Charts8NSUIView")
@interface NSUIView : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ChartXAxis;
@protocol IChartMarker;
@class ChartLegend;
@class ChartLegendRenderer;
@class UIImage;
@class ChartViewPortJob;
@protocol ChartViewDelegate;

SWIFT_CLASS("_TtC6Charts13ChartViewBase")
@interface ChartViewBase : NSUIView <ChartDataProvider, ChartAnimatorDelegate>

/// \returns  The object representing all x-labels, this method can be used to
/// acquire the XAxis object and modify it (e.g. change the position of the
/// labels)
@property (nonatomic, readonly, strong) ChartXAxis * _Nonnull xAxis;

/// If set to true, chart continues to scroll after touch up
@property (nonatomic) BOOL dragDecelerationEnabled;

/// Font object used for drawing the description text (by default in the bottom right corner of the chart)
@property (nonatomic, strong) UIFont * _Nullable descriptionFont;

/// Text color used for drawing the description text
@property (nonatomic, strong) UIColor * _Nullable descriptionTextColor;

/// Text align used for drawing the description text
@property (nonatomic) NSTextAlignment descriptionTextAlign;

/// font object for drawing the information text when there are no values in the chart
@property (nonatomic, strong) UIFont * _Null_unspecified infoFont;
@property (nonatomic, strong) UIColor * _Null_unspecified infoTextColor;

/// description text that appears in the bottom right corner of the chart
@property (nonatomic, copy) NSString * _Nonnull descriptionText;

/// delegate to receive chart events
@property (nonatomic, weak) id <ChartViewDelegate> _Nullable delegate;

/// text that is displayed when the chart is empty
@property (nonatomic, copy) NSString * _Nonnull noDataText;

/// color of the no data text
@property (nonatomic, strong) UIColor * _Nonnull noDataTextColor;

/// text that is displayed when the chart is empty that describes why the chart is empty
@property (nonatomic, copy) NSString * _Nullable noDataTextDescription;

/// object responsible for rendering the data
@property (nonatomic, strong) ChartDataRendererBase * _Nullable renderer;
@property (nonatomic, strong) id <IChartHighlighter> _Nullable highlighter;

/// true if drawing the marker is enabled when tapping on values (use the marker property to specify a marker)
@property (nonatomic) BOOL drawMarkers;

/// \returns  <code>true
/// </code> if drawing the marker is enabled when tapping on values
/// (use the <code>marker
/// </code> property to specify a marker)
@property (nonatomic, readonly) BOOL isDrawMarkersEnabled;

/// The marker that is displayed when a value is clicked on the chart
@property (nonatomic, strong) id <IChartMarker> _Nullable marker;

/// An extra offset to be appended to the viewport's top
@property (nonatomic) CGFloat extraTopOffset;

/// An extra offset to be appended to the viewport's right
@property (nonatomic) CGFloat extraRightOffset;

/// An extra offset to be appended to the viewport's bottom
@property (nonatomic) CGFloat extraBottomOffset;

/// An extra offset to be appended to the viewport's left
@property (nonatomic) CGFloat extraLeftOffset;
- (void)setExtraOffsetsWithLeft:(CGFloat)left top:(CGFloat)top right:(CGFloat)right bottom:(CGFloat)bottom;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// The data for the chart
@property (nonatomic, strong) ChartData * _Nullable data;

/// Clears the chart from all data (sets it to null) and refreshes it (by calling setNeedsDisplay()).
- (void)clear;

/// Removes all DataSets (and thereby Entries) from the chart. Does not set the data object to nil. Also refreshes the chart by calling setNeedsDisplay().
- (void)clearValues;

/// \returns  <code>true
/// </code> if the chart is empty (meaning it's data object is either null or contains no entries).
- (BOOL)isEmpty;

/// Lets the chart know its underlying data has changed and should perform all necessary recalculations. It is crucial that this method is called everytime data is changed dynamically. Not calling this method can lead to crashes or unexpected behaviour.
- (void)notifyDataSetChanged;
- (void)drawRect:(CGRect)rect;

/// \returns  The array of currently highlighted values. This might an empty if nothing is highlighted.
@property (nonatomic, readonly, copy) NSArray<ChartHighlight *> * _Nonnull highlighted;

/// Set this to false to prevent values from being highlighted by tap gesture. Values can still be highlighted via drag or programmatically. default: true
@property (nonatomic) BOOL highlightPerTapEnabled;

/// \returns  <code>true
/// </code> if values can be highlighted via tap gesture, <code>false
/// </code> ifnot.
@property (nonatomic, readonly) BOOL isHighLightPerTapEnabled;

/// Checks if the highlight array is null, has a length of zero or if the first object is null.
///
/// \returns  <code>true
/// </code> if there are values to highlight, <code>false
/// </code> ifthere are no values to highlight.
- (BOOL)valuesToHighlight;

/// Highlights the values at the given indices in the given DataSets. Provide null or an empty array to undo all highlighting. This should be used to programmatically highlight values. This DOES NOT generate a callback to the delegate.
- (void)highlightValues:(NSArray<ChartHighlight *> * _Nullable)highs;

/// Highlights the values represented by the provided Highlight object This DOES NOT generate a callback to the delegate.
///
/// \param highlight contains information about which entry should be highlighted
- (void)highlightValue:(ChartHighlight * _Nullable)highlight;

/// Highlights the value at the given x-value in the given DataSet. Provide -1 as the dataSetIndex to undo all highlighting.
- (void)highlightValueWithX:(double)x dataSetIndex:(NSInteger)dataSetIndex;

/// Highlights the value at the given x-value in the given DataSet. Provide -1 as the dataSetIndex to undo all highlighting.
- (void)highlightValueWithX:(double)x dataSetIndex:(NSInteger)dataSetIndex callDelegate:(BOOL)callDelegate;

/// Highlights the value selected by touch gesture.
- (void)highlightValueWithHighlight:(ChartHighlight * _Nullable)highlight callDelegate:(BOOL)callDelegate;

/// \returns  The Highlight object (contains x-index and DataSet index) of the
/// selected value at the given touch point inside the Line-, Scatter-, or
/// CandleStick-Chart.
- (ChartHighlight * _Nullable)getHighlightByTouchPoint:(CGPoint)pt;

/// The last value that was highlighted via touch.
@property (nonatomic, strong) ChartHighlight * _Nullable lastHighlighted;

/// \returns  The actual position in pixels of the MarkerView for the given Entry in the given DataSet.
- (CGPoint)getMarkerPositionWithHighlight:(ChartHighlight * _Nonnull)highlight;

/// \returns  The animator responsible for animating chart values.
@property (nonatomic, readonly, strong) ChartAnimator * _Null_unspecified chartAnimator;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingX an easing function for the animation on the x axis
///
/// \param easingY an easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingX:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easingX easingY:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easingY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOptionX the easing function for the animation on the x axis
///
/// \param easingOptionY the easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOptionX:(enum ChartEasingOption)easingOptionX easingOptionY:(enum ChartEasingOption)easingOptionY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param yAxisDuration duration for animating the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param xAxisDuration duration for animating the x axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easing an easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
///
/// \param easingOption the easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
///
/// \param yAxisDuration duration for animating the y axis
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration;

/// \returns  The current y-max value across all DataSets
@property (nonatomic, readonly) double chartYMax;

/// \returns  The current y-min value across all DataSets
@property (nonatomic, readonly) double chartYMin;
@property (nonatomic, readonly) double chartXMax;
@property (nonatomic, readonly) double chartXMin;
@property (nonatomic, readonly) double xRange;

/// <ul><li></li></ul>\Note 
/// (Equivalent of getCenter() in MPAndroidChart, as center is already a standard in iOS that returns the center point relative to superview, and MPAndroidChart returns relative to self)*
///
/// \returns  The center point of the chart (the whole View) in pixels.
@property (nonatomic, readonly) CGPoint midPoint;
- (void)setDescriptionTextPositionWithX:(CGFloat)x y:(CGFloat)y;

/// \returns  The center of the chart taking offsets under consideration. (returns the center of the content rectangle)
@property (nonatomic, readonly) CGPoint centerOffsets;

/// \returns  The Legend object of the chart. This method can be used to get an instance of the legend in order to customize the automatically generated Legend.
@property (nonatomic, readonly, strong) ChartLegend * _Nonnull legend;

/// \returns  The renderer object responsible for rendering / drawing the Legend.
@property (nonatomic, readonly, strong) ChartLegendRenderer * _Null_unspecified legendRenderer;

/// \returns  The rectangle that defines the borders of the chart-value surface (into which the actual values are drawn).
@property (nonatomic, readonly) CGRect contentRect;

/// Get all Entry objects at the given index across all DataSets.
- (NSArray<ChartDataEntry *> * _Nonnull)getEntriesAtIndex:(double)xValue;

/// \returns  The ViewPortHandler of the chart that is responsible for the
/// content area of the chart and its offsets and dimensions.
@property (nonatomic, readonly, strong) ChartViewPortHandler * _Null_unspecified viewPortHandler;

/// \returns  The bitmap that represents the chart.
- (UIImage * _Nullable)getChartImageWithTransparent:(BOOL)transparent;

/// Saves the current state of the chart to the camera roll
- (void)saveToCameraRoll;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
- (void)removeViewportJob:(ChartViewPortJob * _Nonnull)job;
- (void)clearAllViewportJobs;
- (void)addViewportJob:(ChartViewPortJob * _Nonnull)job;

/// default: true
///
/// \returns  <code>true
/// </code> if chart continues to scroll after touch up, <code>false
/// </code> ifnot.
@property (nonatomic, readonly) BOOL isDragDecelerationEnabled;

/// Deceleration friction coefficient in [0 ; 1] interval, higher values indicate that speed will decrease slowly, for example if it set to 0, it will stop immediately. 1 is an invalid value, and will be converted to 0.999 automatically.
///
/// <em>default</em>: true
@property (nonatomic) CGFloat dragDecelerationFrictionCoef;

/// The maximum distance in screen pixels away from an entry causing it to highlight. default: 500.0
@property (nonatomic) CGFloat maxHighlightDistance;

/// the number of maximum visible drawn values on the chart only active when drawValuesEnabled is enabled
@property (nonatomic, readonly) NSInteger maxVisibleCount;
- (void)animatorUpdated:(ChartAnimator * _Nonnull)chartAnimator;
- (void)animatorStopped:(ChartAnimator * _Nonnull)chartAnimator;
- (void)nsuiTouchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_PROTOCOL("_TtP6Charts17ChartViewDelegate_")
@protocol ChartViewDelegate
@optional

/// Called when a value has been selected inside the chart.
///
/// \param entry The selected Entry.
///
/// \param highlight The corresponding highlight object that contains information about the highlighted position such as dataSetIndex etc.
- (void)chartValueSelected:(ChartViewBase * _Nonnull)chartView entry:(ChartDataEntry * _Nonnull)entry highlight:(ChartHighlight * _Nonnull)highlight;
- (void)chartValueNothingSelected:(ChartViewBase * _Nonnull)chartView;
- (void)chartScaled:(ChartViewBase * _Nonnull)chartView scaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY;
- (void)chartTranslated:(ChartViewBase * _Nonnull)chartView dX:(CGFloat)dX dY:(CGFloat)dY;
@end





/// An interface for providing custom axis Strings.
SWIFT_PROTOCOL_NAMED("IAxisValueFormatter")
@protocol IChartAxisValueFormatter <NSObject>

/// Called when a value from an axis is formatted before being drawn.
///
/// For performance reasons, avoid excessive calculations and memory allocations inside this method.
///
/// \param value the value that is currently being drawn
///
/// \param axis the axis that the value belongs to
///
/// \returns  The customized label that is drawn on the x-axis.
- (NSString * _Nonnull)stringForValue:(double)value axis:(ChartAxisBase * _Nullable)axis;
@end

@class NSNumberFormatter;

SWIFT_CLASS_NAMED("DefaultAxisValueFormatter")
@interface ChartDefaultAxisValueFormatter : NSObject <IChartAxisValueFormatter>
@property (nonatomic) BOOL hasAutoDecimals;
@property (nonatomic, strong) NSNumberFormatter * _Nullable formatter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFormatter:(NSNumberFormatter * _Nonnull)formatter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDecimals:(NSInteger)decimals OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringForValue:(double)value axis:(ChartAxisBase * _Nullable)axis;
@end



/// Interface that allows custom formatting of all values inside the chart before they are being drawn to the screen.
///
/// Simply create your own formatting class and let it implement ValueFormatter.
///
/// Then override the getFormattedValue(...) method and return whatever you want.
SWIFT_PROTOCOL_NAMED("IValueFormatter")
@protocol IChartValueFormatter <NSObject>

/// Called when a value (from labels inside the chart) is formatted before being drawn.
///
/// For performance reasons, avoid excessive calculations and memory allocations inside this method.
///
/// \param value The value to be formatted
///
/// \param axis The entry the value belongs to - in e.g. BarChart, this is of class BarEntry
///
/// \param dataSetIndex The index of the DataSet the entry in focus belongs to
///
/// \param viewPortHandler provides information about the current chart state (scale, translation, ...)
///
/// \returns  The formatted label ready for being drawn
- (NSString * _Nonnull)stringForValue:(double)value entry:(ChartDataEntry * _Nonnull)entry dataSetIndex:(NSInteger)dataSetIndex viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler;
@end


SWIFT_CLASS_NAMED("DefaultValueFormatter")
@interface ChartDefaultValueFormatter : NSObject <IChartValueFormatter>
@property (nonatomic) BOOL hasAutoDecimals;
@property (nonatomic, strong) NSNumberFormatter * _Nullable formatter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFormatter:(NSNumberFormatter * _Nonnull)formatter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDecimals:(NSInteger)decimals OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringForValue:(double)value entry:(ChartDataEntry * _Nonnull)entry dataSetIndex:(NSInteger)dataSetIndex viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler;
@end

enum ChartFillType : NSInteger;

SWIFT_CLASS_NAMED("Fill")
@interface ChartFill : NSObject
@property (nonatomic, readonly) enum ChartFillType type;
@property (nonatomic, readonly) CGColorRef _Nullable color;
@property (nonatomic, readonly) CGGradientRef _Nullable gradient;
@property (nonatomic, readonly) CGFloat gradientAngle;
@property (nonatomic, readonly) CGPoint gradientStartOffsetPercent;
@property (nonatomic, readonly) CGFloat gradientStartRadiusPercent;
@property (nonatomic, readonly) CGPoint gradientEndOffsetPercent;
@property (nonatomic, readonly) CGFloat gradientEndRadiusPercent;
@property (nonatomic, readonly) CGImageRef _Nullable image;
@property (nonatomic, readonly) CGLayerRef _Nullable layer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCGColor:(CGColorRef _Nonnull)CGColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)initWithLinearGradient:(CGGradientRef _Nonnull)linearGradient angle:(CGFloat)angle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRadialGradient:(CGGradientRef _Nonnull)radialGradient startOffsetPercent:(CGPoint)startOffsetPercent startRadiusPercent:(CGFloat)startRadiusPercent endOffsetPercent:(CGPoint)endOffsetPercent endRadiusPercent:(CGFloat)endRadiusPercent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRadialGradient:(CGGradientRef _Nonnull)radialGradient;
- (nonnull instancetype)initWithCGImage:(CGImageRef _Nonnull)CGImage tiled:(BOOL)tiled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image tiled:(BOOL)tiled;
- (nonnull instancetype)initWithCGImage:(CGImageRef _Nonnull)CGImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image;
- (nonnull instancetype)initWithCGLayer:(CGLayerRef _Nonnull)CGLayer OBJC_DESIGNATED_INITIALIZER;
+ (ChartFill * _Nonnull)fillWithCGColor:(CGColorRef _Nonnull)CGColor;
+ (ChartFill * _Nonnull)fillWithColor:(UIColor * _Nonnull)color;
+ (ChartFill * _Nonnull)fillWithLinearGradient:(CGGradientRef _Nonnull)linearGradient angle:(CGFloat)angle;
+ (ChartFill * _Nonnull)fillWithRadialGradient:(CGGradientRef _Nonnull)radialGradient startOffsetPercent:(CGPoint)startOffsetPercent startRadiusPercent:(CGFloat)startRadiusPercent endOffsetPercent:(CGPoint)endOffsetPercent endRadiusPercent:(CGFloat)endRadiusPercent;
+ (ChartFill * _Nonnull)fillWithRadialGradient:(CGGradientRef _Nonnull)radialGradient;
+ (ChartFill * _Nonnull)fillWithCGImage:(CGImageRef _Nonnull)CGImage tiled:(BOOL)tiled;
+ (ChartFill * _Nonnull)fillWithImage:(UIImage * _Nonnull)image tiled:(BOOL)tiled;
+ (ChartFill * _Nonnull)fillWithCGImage:(CGImageRef _Nonnull)CGImage;
+ (ChartFill * _Nonnull)fillWithImage:(UIImage * _Nonnull)image;
+ (ChartFill * _Nonnull)fillWithCGLayer:(CGLayerRef _Nonnull)CGLayer;

/// Draws the provided path in filled mode with the provided area
- (void)fillPathWithContext:(CGContextRef _Nonnull)context rect:(CGRect)rect;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ChartFillType, "Type") {
  ChartFillTypeEmpty = 0,
  ChartFillTypeColor = 1,
  ChartFillTypeLinearGradient = 2,
  ChartFillTypeRadialGradient = 3,
  ChartFillTypeImage = 4,
  ChartFillTypeTiledImage = 5,
  ChartFillTypeLayer = 6,
};


SWIFT_CLASS_NAMED("Highlight")
@interface ChartHighlight : NSObject

/// the index of the data object - in case it refers to more than one
@property (nonatomic) NSInteger dataIndex;

/// the x-position (pixels) on which this highlight object was last drawn
@property (nonatomic) CGFloat drawX;

/// the y-position (pixels) on which this highlight object was last drawn
@property (nonatomic) CGFloat drawY;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// \param x the x-value of the highlighted value
///
/// \param y the y-value of the highlighted value
///
/// \param xPx the x-pixel of the highlighted value
///
/// \param yPx the y-pixel of the highlighted value
///
/// \param dataIndex the index of the Data the highlighted value belongs to
///
/// \param dataSetIndex the index of the DataSet the highlighted value belongs to
///
/// \param stackIndex references which value of a stacked-bar entry has been selected
///
/// \param axis the axis the highlighted value belongs to
- (nonnull instancetype)initWithX:(double)x y:(double)y xPx:(CGFloat)xPx yPx:(CGFloat)yPx dataIndex:(NSInteger)dataIndex dataSetIndex:(NSInteger)dataSetIndex stackIndex:(NSInteger)stackIndex axis:(enum AxisDependency)axis OBJC_DESIGNATED_INITIALIZER;

/// \param x the x-value of the highlighted value
///
/// \param y the y-value of the highlighted value
///
/// \param xPx the x-pixel of the highlighted value
///
/// \param yPx the y-pixel of the highlighted value
///
/// \param dataSetIndex the index of the DataSet the highlighted value belongs to
///
/// \param stackIndex references which value of a stacked-bar entry has been selected
///
/// \param axis the axis the highlighted value belongs to
- (nonnull instancetype)initWithX:(double)x y:(double)y xPx:(CGFloat)xPx yPx:(CGFloat)yPx dataSetIndex:(NSInteger)dataSetIndex stackIndex:(NSInteger)stackIndex axis:(enum AxisDependency)axis;

/// \param x the x-value of the highlighted value
///
/// \param y the y-value of the highlighted value
///
/// \param xPx the x-pixel of the highlighted value
///
/// \param yPx the y-pixel of the highlighted value
///
/// \param dataIndex the index of the Data the highlighted value belongs to
///
/// \param dataSetIndex the index of the DataSet the highlighted value belongs to
///
/// \param stackIndex references which value of a stacked-bar entry has been selected
///
/// \param axis the axis the highlighted value belongs to
- (nonnull instancetype)initWithX:(double)x y:(double)y xPx:(CGFloat)xPx yPx:(CGFloat)yPx dataSetIndex:(NSInteger)dataSetIndex axis:(enum AxisDependency)axis OBJC_DESIGNATED_INITIALIZER;

/// \param x the x-value of the highlighted value
///
/// \param dataSetIndex the index of the DataSet the highlighted value belongs to
- (nonnull instancetype)initWithX:(double)x dataSetIndex:(NSInteger)dataSetIndex OBJC_DESIGNATED_INITIALIZER;

/// \param x the x-value of the highlighted value
///
/// \param dataSetIndex the index of the DataSet the highlighted value belongs to
///
/// \param stackIndex references which value of a stacked-bar entry has been selected
- (nonnull instancetype)initWithX:(double)x dataSetIndex:(NSInteger)dataSetIndex stackIndex:(NSInteger)stackIndex;
@property (nonatomic, readonly) double x;
@property (nonatomic, readonly) double y;
@property (nonatomic, readonly) CGFloat xPx;
@property (nonatomic, readonly) CGFloat yPx;
@property (nonatomic, readonly) NSInteger dataSetIndex;
@property (nonatomic, readonly) NSInteger stackIndex;
@property (nonatomic, readonly) enum AxisDependency axis;
@property (nonatomic, readonly) BOOL isStacked;

/// Sets the x- and y-position (pixels) where this highlight was last drawn.
- (void)setDrawWithX:(CGFloat)x y:(CGFloat)y;

/// Sets the x- and y-position (pixels) where this highlight was last drawn.
- (void)setDrawWithPt:(CGPoint)pt;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object;
@end



SWIFT_PROTOCOL("_TtP6Charts16IBarChartDataSet_")
@protocol IBarChartDataSet <IBarLineScatterCandleBubbleChartDataSet>

/// \returns  <code>true
/// </code> if this DataSet is stacked (stacksize > 1) or not.
@property (nonatomic, readonly) BOOL isStacked;

/// \returns  The maximum number of bars that can be stacked upon another in this DataSet.
@property (nonatomic, readonly) NSInteger stackSize;

/// the color used for drawing the bar-shadows. The bar shadows is a surface behind the bar that indicates the maximum value
@property (nonatomic, strong) UIColor * _Nonnull barShadowColor;

/// the width used for drawing borders around the bars. If borderWidth == 0, no border will be drawn.
@property (nonatomic) CGFloat barBorderWidth;

/// the color drawing borders around the bars.
@property (nonatomic, strong) UIColor * _Nonnull barBorderColor;

/// the alpha value (transparency) that is used for drawing the highlight indicator bar. min = 0.0 (fully transparent), max = 1.0 (fully opaque)
@property (nonatomic) CGFloat highlightAlpha;

/// array of labels used to describe the different values of the stacked bars
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stackLabels;
@end



SWIFT_PROTOCOL("_TtP6Charts35ILineScatterCandleRadarChartDataSet_")
@protocol ILineScatterCandleRadarChartDataSet <IBarLineScatterCandleBubbleChartDataSet>

/// Enables / disables the horizontal highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawHorizontalHighlightIndicatorEnabled;

/// Enables / disables the vertical highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawVerticalHighlightIndicatorEnabled;

/// \returns  <code>true
/// </code> if horizontal highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isHorizontalHighlightIndicatorEnabled;

/// \returns  <code>true
/// </code> if vertical highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isVerticalHighlightIndicatorEnabled;

/// Enables / disables both vertical and horizontal highlight-indicators. :param: enabled
- (void)setDrawHighlightIndicators:(BOOL)enabled;
@end


SWIFT_PROTOCOL("_TtP6Charts19ICandleChartDataSet_")
@protocol ICandleChartDataSet <ILineScatterCandleRadarChartDataSet>

/// the space that is left out on the left and right side of each candle, default: 0.1 (10%), max 0.45, min 0.0
@property (nonatomic) CGFloat barSpace;

/// should the candle bars show? when false, only "ticks" will show
///
/// <em>default</em>: true
@property (nonatomic) BOOL showCandleBar;

/// the width of the candle-shadow-line in pixels.
///
/// <em>default</em>: 3.0
@property (nonatomic) CGFloat shadowWidth;

/// the color of the shadow line
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// use candle color for the shadow
@property (nonatomic) BOOL shadowColorSameAsCandle;

/// Is the shadow color same as the candle color?
@property (nonatomic, readonly) BOOL isShadowColorSameAsCandle;

/// color for open == close
@property (nonatomic, strong) UIColor * _Nullable neutralColor;

/// color for open > close
@property (nonatomic, strong) UIColor * _Nullable increasingColor;

/// color for open < close
@property (nonatomic, strong) UIColor * _Nullable decreasingColor;

/// Are increasing values drawn as filled?
@property (nonatomic) BOOL increasingFilled;

/// Are increasing values drawn as filled?
@property (nonatomic, readonly) BOOL isIncreasingFilled;

/// Are decreasing values drawn as filled?
@property (nonatomic) BOOL decreasingFilled;

/// Are decreasing values drawn as filled?
@property (nonatomic, readonly) BOOL isDecreasingFilled;
@end




SWIFT_PROTOCOL("_TtP6Charts22ILineRadarChartDataSet_")
@protocol ILineRadarChartDataSet <ILineScatterCandleRadarChartDataSet>

/// The color that is used for filling the line surface area.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;

/// \returns  The object that is used for filling the area below the line.
/// <em>default</em>: nil
@property (nonatomic, strong) ChartFill * _Nullable fill;

/// The alpha value that is used for filling the line surface. default: 0.33
@property (nonatomic) CGFloat fillAlpha;

/// line width of the chart (min = 0.2, max = 10)
///
/// <em>default</em>: 1
@property (nonatomic) CGFloat lineWidth;

/// Set to true if the DataSet should be drawn filled (surface), and not just as a line. Disabling this will give great performance boost. Please note that this method uses the path clipping for drawing the filled area (with images, gradients and layers).
@property (nonatomic) BOOL drawFilledEnabled;

/// \returns  <code>true
/// </code> if filled drawing is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawFilledEnabled;
@end



SWIFT_PROTOCOL_NAMED("IMarker")
@protocol IChartMarker <NSObject>

/// By returning x: -(width / 2) you will center the IMarker horizontally.
///
/// By returning y: -(height / 2) you will center the IMarker vertically.
///
/// \returns  The desired (general) offset you wish the IMarker to have on the x-axis.
@property (nonatomic, readonly) CGPoint offset;

/// \param point This is the point at which the marker wants to be drawn. You can adjust the offset conditionally based on this argument.
///
/// \returns  The offset for drawing at the specific <code>point
/// </code>.
/// This allows conditional adjusting of the Marker position.
/// If you have no adjustments to make, return self.offset().
- (CGPoint)offsetForDrawingAtPos:(CGPoint)point;

/// This method enables a custom IMarker to update it's content every time the IMarker is redrawn according to the data entry it points to.
///
/// \param entry The Entry the IMarker belongs to. This can also be any subclass of Entry, like BarEntry or CandleEntry, simply cast it at runtime.
///
/// \param highlight The highlight object contains information about the highlighted value such as it's dataset-index, the selected range or stack-index (only stacked bar entries).
- (void)refreshContentWithEntry:(ChartDataEntry * _Nonnull)entry highlight:(ChartHighlight * _Nonnull)highlight;

/// Draws the IMarker on the given position on the given context
- (void)drawWithContext:(CGContextRef _Nonnull)context point:(CGPoint)point;
@end

enum PieChartValuePosition : NSInteger;

SWIFT_PROTOCOL("_TtP6Charts16IPieChartDataSet_")
@protocol IPieChartDataSet <IChartDataSet>

/// the space in pixels between the pie-slices default: 0 maximum: 20
@property (nonatomic) CGFloat sliceSpace;

/// indicates the selection distance of a pie slice
@property (nonatomic) CGFloat selectionShift;
@property (nonatomic) enum PieChartValuePosition xValuePosition;
@property (nonatomic) enum PieChartValuePosition yValuePosition;

/// When valuePosition is OutsideSlice, indicates line color
@property (nonatomic, strong) UIColor * _Nullable valueLineColor;

/// When valuePosition is OutsideSlice, indicates line width
@property (nonatomic) CGFloat valueLineWidth;

/// When valuePosition is OutsideSlice, indicates offset as percentage out of the slice size
@property (nonatomic) CGFloat valueLinePart1OffsetPercentage;

/// When valuePosition is OutsideSlice, indicates length of first half of the line
@property (nonatomic) CGFloat valueLinePart1Length;

/// When valuePosition is OutsideSlice, indicates length of second half of the line
@property (nonatomic) CGFloat valueLinePart2Length;

/// When valuePosition is OutsideSlice, this allows variable line length
@property (nonatomic) BOOL valueLineVariableLength;
@end


SWIFT_PROTOCOL("_TtP6Charts18IRadarChartDataSet_")
@protocol IRadarChartDataSet <ILineRadarChartDataSet>

/// flag indicating whether highlight circle should be drawn or not
@property (nonatomic) BOOL drawHighlightCircleEnabled;
@property (nonatomic, readonly) BOOL isDrawHighlightCircleEnabled;
@property (nonatomic, strong) UIColor * _Nullable highlightCircleFillColor;

/// The stroke color for highlight circle. If nil, the color of the dataset is taken.
@property (nonatomic, strong) UIColor * _Nullable highlightCircleStrokeColor;
@property (nonatomic) CGFloat highlightCircleStrokeAlpha;
@property (nonatomic) CGFloat highlightCircleInnerRadius;
@property (nonatomic) CGFloat highlightCircleOuterRadius;
@property (nonatomic) CGFloat highlightCircleStrokeWidth;
@end


@class ChartLegendEntry;
enum ChartLegendPosition : NSInteger;
enum ChartLegendHorizontalAlignment : NSInteger;
enum ChartLegendVerticalAlignment : NSInteger;
enum ChartLegendOrientation : NSInteger;
enum ChartLegendDirection : NSInteger;

SWIFT_CLASS_NAMED("Legend")
@interface ChartLegend : ChartComponentBase

/// The legend entries array
@property (nonatomic, copy) NSArray<ChartLegendEntry *> * _Nonnull entries;

/// Entries that will be appended to the end of the auto calculated entries after calculating the legend. (if the legend has already been calculated, you will need to call notifyDataSetChanged() to let the changes take effect)
@property (nonatomic, copy) NSArray<ChartLegendEntry *> * _Nonnull extraEntries;

/// This property is deprecated - Use position, horizontalAlignment, verticalAlignment, orientation, drawInside, direction.
@property (nonatomic) enum ChartLegendPosition position;

/// The horizontal alignment of the legend
@property (nonatomic) enum ChartLegendHorizontalAlignment horizontalAlignment;

/// The vertical alignment of the legend
@property (nonatomic) enum ChartLegendVerticalAlignment verticalAlignment;

/// The orientation of the legend
@property (nonatomic) enum ChartLegendOrientation orientation;

/// Flag indicating whether the legend will draw inside the chart or outside
@property (nonatomic) BOOL drawInside;

/// Flag indicating whether the legend will draw inside the chart or outside
@property (nonatomic, readonly) BOOL isDrawInsideEnabled;

/// The text direction of the legend
@property (nonatomic) enum ChartLegendDirection direction;
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIColor * _Nonnull textColor;

/// The form/shape of the legend forms
@property (nonatomic) enum ChartLegendForm form;

/// The size of the legend forms
@property (nonatomic) CGFloat formSize;

/// The line width for forms that consist of lines
@property (nonatomic) CGFloat formLineWidth;

/// Line dash configuration for shapes that consist of lines.
///
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic) CGFloat formLineDashPhase;

/// Line dash configuration for shapes that consist of lines.
///
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [--   --   ]
/// [1, 3, 4, 2] will paint [-   ----  -   ----  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;
@property (nonatomic) CGFloat xEntrySpace;
@property (nonatomic) CGFloat yEntrySpace;
@property (nonatomic) CGFloat formToTextSpace;
@property (nonatomic) CGFloat stackSpace;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull calculatedLabelBreakPoints;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntries:(NSArray<ChartLegendEntry *> * _Nonnull)entries OBJC_DESIGNATED_INITIALIZER;
- (CGSize)getMaximumEntrySize:(UIFont * _Nonnull)font;
@property (nonatomic) CGFloat neededWidth;
@property (nonatomic) CGFloat neededHeight;
@property (nonatomic) CGFloat textWidthMax;
@property (nonatomic) CGFloat textHeightMax;

/// flag that indicates if word wrapping is enabled this is currently supported only for orientation == Horizontal. you may want to set maxSizePercent when word wrapping, to set the point where the text wraps.
///
/// <em>default</em>: false
@property (nonatomic) BOOL wordWrapEnabled;

/// if this is set, then word wrapping the legend is enabled.
@property (nonatomic, readonly) BOOL isWordWrapEnabled;

/// The maximum relative size out of the whole chart view in percent. If the legend is to the right/left of the chart, then this affects the width of the legend. If the legend is to the top/bottom of the chart, then this affects the height of the legend.
///
/// <em>default</em>: 0.95 (95%)
@property (nonatomic) CGFloat maxSizePercent;
- (void)calculateDimensionsWithLabelFont:(UIFont * _Nonnull)labelFont viewPortHandler:(ChartViewPortHandler * _Nonnull)viewPortHandler;

/// MARK: - Custom legend Sets a custom legend's entries array.
///
/// <ul><li>A nil label will start a group.
/// This will disable the feature that automatically calculates the legend entries from the datasets.
/// Call <code>resetCustom(...)
/// </code> to re-enable automatic calculation (and then <code>notifyDataSetChanged()
/// </code> is needed).</li></ul>
- (void)setCustomWithEntries:(NSArray<ChartLegendEntry *> * _Nonnull)entries;

/// Calling this will disable the custom legend entries (set by setLegend(...)). Instead, the entries will again be calculated automatically (after notifyDataSetChanged() is called).
- (void)resetCustom;

/// default: false (automatic legend)
///
/// \returns  <code>true
/// </code> if a custom legend entries has been set
@property (nonatomic, readonly) BOOL isLegendCustom;

/// This constructor is deprecated - Use init(entries:)
- (nonnull instancetype)initWithColors:(NSArray<NSObject *> * _Nonnull)colors labels:(NSArray<NSObject *> * _Nonnull)labels OBJC_DESIGNATED_INITIALIZER;

/// This property is deprecated - Use extraEntries
@property (nonatomic, readonly, copy) NSArray<NSObject *> * _Nonnull extraColorsObjc;

/// This property is deprecated - Use extraLabels
@property (nonatomic, readonly, copy) NSArray<NSObject *> * _Nonnull extraLabelsObjc;

/// This property is deprecated - Use colors
@property (nonatomic, copy) NSArray<NSObject *> * _Nonnull colorsObjc;

/// This property is deprecated - Use labels
@property (nonatomic, copy) NSArray<NSObject *> * _Nonnull labelsObjc;

/// This function is deprecated - Use entries
- (NSString * _Nullable)getLabel:(NSInteger)index;

/// This function is deprecated - Use Useextra(entries:)`
- (void)setExtraWithColors:(NSArray<NSObject *> * _Nonnull)colors labels:(NSArray<NSObject *> * _Nonnull)labels;

/// This function is deprecated - Use UsesetCustom(entries:)`
- (void)setCustomWithColors:(NSArray<NSObject *> * _Nonnull)colors labels:(NSArray<NSObject *> * _Nonnull)labels;
@end


/// This property is deprecated - Use position, horizontalAlignment, verticalAlignment, orientation, drawInside, direction.
typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendPosition, "Position") {
  ChartLegendPositionRightOfChart = 0,
  ChartLegendPositionRightOfChartCenter = 1,
  ChartLegendPositionRightOfChartInside = 2,
  ChartLegendPositionLeftOfChart = 3,
  ChartLegendPositionLeftOfChartCenter = 4,
  ChartLegendPositionLeftOfChartInside = 5,
  ChartLegendPositionBelowChartLeft = 6,
  ChartLegendPositionBelowChartRight = 7,
  ChartLegendPositionBelowChartCenter = 8,
  ChartLegendPositionAboveChartLeft = 9,
  ChartLegendPositionAboveChartRight = 10,
  ChartLegendPositionAboveChartCenter = 11,
  ChartLegendPositionPiechartCenter = 12,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendForm, "Form") {

/// Avoid drawing a form
  ChartLegendFormNone = 0,

/// Do not draw the a form, but leave space for it
  ChartLegendFormEmpty = 1,

/// Use default (default dataset's form to the legend's form)
  ChartLegendFormDefault = 2,

/// Draw a square
  ChartLegendFormSquare = 3,

/// Draw a circle
  ChartLegendFormCircle = 4,

/// Draw a horizontal line
  ChartLegendFormLine = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendHorizontalAlignment, "HorizontalAlignment") {
  ChartLegendHorizontalAlignmentLeft = 0,
  ChartLegendHorizontalAlignmentCenter = 1,
  ChartLegendHorizontalAlignmentRight = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendVerticalAlignment, "VerticalAlignment") {
  ChartLegendVerticalAlignmentTop = 0,
  ChartLegendVerticalAlignmentCenter = 1,
  ChartLegendVerticalAlignmentBottom = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendOrientation, "Orientation") {
  ChartLegendOrientationHorizontal = 0,
  ChartLegendOrientationVertical = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ChartLegendDirection, "Direction") {
  ChartLegendDirectionLeftToRight = 0,
  ChartLegendDirectionRightToLeft = 1,
};


SWIFT_CLASS_NAMED("LegendEntry")
@interface ChartLegendEntry : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// \param label The legend entry text.
/// A <code>nil
/// </code> label will start a group.
///
/// \param form The form to draw for this entry.
///
/// \param formSize Set to NaN to use the legend's default.
///
/// \param formLineWidth Set to NaN to use the legend's default.
///
/// \param formLineDashPhase Line dash configuration.
///
/// \param formLineDashLengths Line dash configurationas NaN to use the legend's default.
///
/// \param formColor The color for drawing the form.
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label form:(enum ChartLegendForm)form formSize:(CGFloat)formSize formLineWidth:(CGFloat)formLineWidth formLineDashPhase:(CGFloat)formLineDashPhase formLineDashLengths:(NSArray<NSNumber *> * _Nullable)formLineDashLengths formColor:(UIColor * _Nullable)formColor OBJC_DESIGNATED_INITIALIZER;

/// The legend entry text. A nil label will start a group.
@property (nonatomic, copy) NSString * _Nullable label;

/// The form to draw for this entry.
///
/// <code>None
/// </code> will avoid drawing a form, and any related space.
/// <code>Empty
/// </code> will avoid drawing a form, but keep its space.
/// <code>Default
/// </code> will use the Legend's default.
@property (nonatomic) enum ChartLegendForm form;

/// Form size will be considered except for when .None is used
///
/// Set as NaN to use the legend's default
@property (nonatomic) CGFloat formSize;

/// Line width used for shapes that consist of lines.
///
/// Set to NaN to use the legend's default.
@property (nonatomic) CGFloat formLineWidth;

/// Line dash configuration for shapes that consist of lines.
///
/// This is how much (in pixels) into the dash pattern are we starting from.
///
/// Set to NaN to use the legend's default.
@property (nonatomic) CGFloat formLineDashPhase;

/// Line dash configuration for shapes that consist of lines.
///
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [--   --   ]
/// [1, 3, 4, 2] will paint [-   ----  -   ----  ]
///
/// Set to nil to use the legend's default.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;

/// The color for drawing the form
@property (nonatomic, strong) UIColor * _Nullable formColor;
@end


SWIFT_CLASS_NAMED("LegendRenderer")
@interface ChartLegendRenderer : ChartRenderer

/// the legend object this renderer renders
@property (nonatomic, strong) ChartLegend * _Nullable legend;
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler legend:(ChartLegend * _Nullable)legend OBJC_DESIGNATED_INITIALIZER;

/// Prepares the legend and calculates all needed forms, labels and colors.
- (void)computeLegend:(ChartData * _Nonnull)data;
- (void)renderLegendWithContext:(CGContextRef _Nonnull)context;

/// Draws the Legend-form at the given position with the color at the given index.
- (void)drawFormWithContext:(CGContextRef _Nonnull)context x:(CGFloat)x y:(CGFloat)y entry:(ChartLegendEntry * _Nonnull)entry legend:(ChartLegend * _Nonnull)legend;

/// Draws the provided label at the given position.
- (void)drawLabelWithContext:(CGContextRef _Nonnull)context x:(CGFloat)x y:(CGFloat)y label:(NSString * _Nonnull)label font:(UIFont * _Nonnull)font textColor:(UIColor * _Nonnull)textColor;
@end


SWIFT_CLASS("_TtC6Charts34LineScatterCandleRadarChartDataSet")
@interface LineScatterCandleRadarChartDataSet : BarLineScatterCandleBubbleChartDataSet <ILineScatterCandleRadarChartDataSet>

/// Enables / disables the horizontal highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawHorizontalHighlightIndicatorEnabled;

/// Enables / disables the vertical highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawVerticalHighlightIndicatorEnabled;

/// \returns  <code>true
/// </code> if horizontal highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isHorizontalHighlightIndicatorEnabled;

/// \returns  <code>true
/// </code> if vertical highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isVerticalHighlightIndicatorEnabled;

/// Enables / disables both vertical and horizontal highlight-indicators. :param: enabled
- (void)setDrawHighlightIndicators:(BOOL)enabled;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts21LineRadarChartDataSet")
@interface LineRadarChartDataSet : LineScatterCandleRadarChartDataSet <ILineRadarChartDataSet>

/// The color that is used for filling the line surface area.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;

/// The object that is used for filling the area below the line. default: nil
@property (nonatomic, strong) ChartFill * _Nullable fill;

/// The alpha value that is used for filling the line surface, default: 0.33
@property (nonatomic) CGFloat fillAlpha;

/// line width of the chart (min = 0.2, max = 10)
///
/// <em>default</em>: 1
@property (nonatomic) CGFloat lineWidth;

/// Set to true if the DataSet should be drawn filled (surface), and not just as a line. Disabling this will give great performance boost. Please note that this method uses the path clipping for drawing the filled area (with images, gradients and layers).
@property (nonatomic) BOOL drawFilledEnabled;

/// \returns  <code>true
/// </code> if filled drawing is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawFilledEnabled;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LineScatterCandleRadarRenderer")
@interface LineScatterCandleRadarChartRenderer : BarLineScatterCandleBubbleChartRenderer
- (nonnull instancetype)initWithAnimator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;

/// Draws vertical & horizontal highlight-lines if enabled. :param: context :param: points :param: horizontal :param: vertical
- (void)drawHighlightLinesWithContext:(CGContextRef _Nonnull)context point:(CGPoint)point set:(id <ILineScatterCandleRadarChartDataSet> _Nonnull)set;
@end


SWIFT_CLASS_NAMED("LineRadarRenderer")
@interface LineRadarChartRenderer : LineScatterCandleRadarChartRenderer
- (nonnull instancetype)initWithAnimator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;

/// Draws the provided path in filled mode with the provided drawable.
- (void)drawFilledPathWithContext:(CGContextRef _Nonnull)context path:(CGPathRef _Nonnull)path fill:(ChartFill * _Nonnull)fill fillAlpha:(CGFloat)fillAlpha;

/// Draws the provided path in filled mode with the provided color and alpha.
- (void)drawFilledPathWithContext:(CGContextRef _Nonnull)context path:(CGPathRef _Nonnull)path fillColor:(UIColor * _Nonnull)fillColor fillAlpha:(CGFloat)fillAlpha;
@end





SWIFT_CLASS("_TtC6Charts12PieChartData")
@interface PieChartData : ChartData
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSets:(NSArray<id <IChartDataSet>> * _Nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
- (id <IChartDataSet> _Nullable)getDataSetByIndex:(NSInteger)index;
- (id <IChartDataSet> _Nullable)getDataSetByLabel:(NSString * _Nonnull)label ignorecase:(BOOL)ignorecase;
- (ChartDataEntry * _Nullable)entryForHighlight:(ChartHighlight * _Nonnull)highlight;
- (void)addDataSet:(id <IChartDataSet> _Null_unspecified)d;

/// Removes the DataSet at the given index in the DataSet array from the data object. Also recalculates all minimum and maximum values.
///
/// \returns  <code>true
/// </code> if a DataSet was removed, <code>false
/// </code> ifno DataSet could be removed.
- (BOOL)removeDataSetByIndex:(NSInteger)index;

/// \returns  The total y-value sum across all DataSet objects the this object represents.
@property (nonatomic, readonly) double yValueSum;
@end


SWIFT_CLASS("_TtC6Charts17PieChartDataEntry")
@interface PieChartDataEntry : ChartDataEntry
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// \param value The value on the y-axis.
///
/// \param label The label for the x-axis
///
/// \param data Spot for additional data this Entry represents.
- (nonnull instancetype)initWithValue:(double)value label:(NSString * _Nullable)label data:(id _Nullable)data OBJC_DESIGNATED_INITIALIZER;

/// \param value The value on the y-axis.
///
/// \param label The label for the x-axis
- (nonnull instancetype)initWithValue:(double)value label:(NSString * _Nullable)label;

/// \param value The value on the y-axis.
///
/// \param data Spot for additional data this Entry represents.
- (nonnull instancetype)initWithValue:(double)value data:(id _Nullable)data;

/// \param value The value on the y-axis.
- (nonnull instancetype)initWithValue:(double)value;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic) double value;
@property (nonatomic) double x;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts15PieChartDataSet")
@interface PieChartDataSet : ChartDataSet <IPieChartDataSet>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;

/// the space in pixels between the pie-slices default: 0 maximum: 20
@property (nonatomic) CGFloat sliceSpace;

/// indicates the selection distance of a pie slice
@property (nonatomic) CGFloat selectionShift;
@property (nonatomic) enum PieChartValuePosition xValuePosition;
@property (nonatomic) enum PieChartValuePosition yValuePosition;

/// When valuePosition is OutsideSlice, indicates line color
@property (nonatomic, strong) UIColor * _Nullable valueLineColor;

/// When valuePosition is OutsideSlice, indicates line width
@property (nonatomic) CGFloat valueLineWidth;

/// When valuePosition is OutsideSlice, indicates offset as percentage out of the slice size
@property (nonatomic) CGFloat valueLinePart1OffsetPercentage;

/// When valuePosition is OutsideSlice, indicates length of first half of the line
@property (nonatomic) CGFloat valueLinePart1Length;

/// When valuePosition is OutsideSlice, indicates length of second half of the line
@property (nonatomic) CGFloat valueLinePart2Length;

/// When valuePosition is OutsideSlice, this allows variable line length
@property (nonatomic) BOOL valueLineVariableLength;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PieChartValuePosition, "ValuePosition") {
  PieChartValuePositionInsideSlice = 0,
  PieChartValuePositionOutsideSlice = 1,
};

@class PieChartView;

SWIFT_CLASS("_TtC6Charts16PieChartRenderer")
@interface PieChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) PieChartView * _Nullable chart;
- (nonnull instancetype)initWithChart:(PieChartView * _Nullable)chart animator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (CGFloat)calculateMinimumRadiusForSpacedSliceWithCenter:(CGPoint)center radius:(CGFloat)radius angle:(CGFloat)angle arcStartPointX:(CGFloat)arcStartPointX arcStartPointY:(CGFloat)arcStartPointY startAngle:(CGFloat)startAngle sweepAngle:(CGFloat)sweepAngle;

/// Calculates the sliceSpace to use based on visible values and their size compared to the set sliceSpace.
- (CGFloat)getSliceSpaceWithDataSet:(id <IPieChartDataSet> _Nonnull)dataSet;
- (void)drawDataSetWithContext:(CGContextRef _Nonnull)context dataSet:(id <IPieChartDataSet> _Nonnull)dataSet;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<ChartHighlight *> * _Nonnull)indices;
@end



/// Base class of PieChartView and RadarChartView.
SWIFT_CLASS("_TtC6Charts21PieRadarChartViewBase")
@interface PieRadarChartViewBase : ChartViewBase

/// flag that indicates if rotation is enabled or not
@property (nonatomic) BOOL rotationEnabled;

/// Sets the minimum offset (padding) around the chart, defaults to 0.0
@property (nonatomic) CGFloat minOffset;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger maxVisibleCount;
- (void)notifyDataSetChanged;

/// \returns  The angle relative to the chart center for the given point on the chart in degrees.
/// The angle is always between 0 and 360°, 0° is NORTH, 90° is EAST, ...
- (CGFloat)angleForPointWithX:(CGFloat)x y:(CGFloat)y;

/// Calculates the position around a center point, depending on the distance from the center, and the angle of the position around the center.
- (CGPoint)getPositionWithCenter:(CGPoint)center dist:(CGFloat)dist angle:(CGFloat)angle;

/// \returns  The distance of a certain point on the chart to the center of the chart.
- (CGFloat)distanceToCenterWithX:(CGFloat)x y:(CGFloat)y;

/// \returns  The xIndex for the given angle around the center of the chart.
/// -1 if not found / outofbounds.
- (NSInteger)indexForAngle:(CGFloat)angle;

/// current rotation angle of the pie chart
///
/// <em>default</em>: 270 --> top (NORTH)
///
/// \returns  Will always return a normalized value, which will be between 0.0 < 360.0
@property (nonatomic) CGFloat rotationAngle;

/// gets the raw version of the current rotation angle of the pie chart the returned value could be any value, negative or positive, outside of the 360 degrees. this is used when working with rotation direction, mainly by gestures and animations.
@property (nonatomic, readonly) CGFloat rawRotationAngle;

/// \returns  The diameter of the pie- or radar-chart
@property (nonatomic, readonly) CGFloat diameter;

/// \returns  The radius of the chart in pixels.
@property (nonatomic, readonly) CGFloat radius;
@property (nonatomic, readonly) double chartYMax;
@property (nonatomic, readonly) double chartYMin;
@property (nonatomic, readonly) BOOL isRotationEnabled;

/// flag that indicates if rotation is done with two fingers or one. when the chart is inside a scrollview, you need a two-finger rotation because a one-finger rotation eats up all touch events.
///
/// On iOS this will disable one-finger rotation.
/// On OSX this will keep two-finger multitouch rotation, and one-pointer mouse rotation.
///
/// <em>default</em>: false
@property (nonatomic) BOOL rotationWithTwoFingers;

/// flag that indicates if rotation is done with two fingers or one. when the chart is inside a scrollview, you need a two-finger rotation because a one-finger rotation eats up all touch events.
///
/// On iOS this will disable one-finger rotation.
/// On OSX this will keep two-finger multitouch rotation, and one-pointer mouse rotation.
///
/// <em>default</em>: false
@property (nonatomic, readonly) BOOL isRotationWithTwoFingers;

/// Applys a spin animation to the Chart.
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle easing:(double (^ _Nullable)(NSTimeInterval elapsed, NSTimeInterval duration))easing;
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle easingOption:(enum ChartEasingOption)easingOption;
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle;
- (void)stopSpinAnimation;
- (void)nsuiTouchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
- (void)stopDeceleration;
@end

@class NSAttributedString;


/// View that represents a pie chart. Draws cake like slices.
SWIFT_CLASS("_TtC6Charts12PieChartView")
@interface PieChartView : PieRadarChartViewBase
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (CGPoint)getMarkerPositionWithHighlight:(ChartHighlight * _Nonnull)highlight;

/// Checks if the given index is set to be highlighted.
- (BOOL)needsHighlightWithIndex:(NSInteger)index;

/// This will throw an exception, PieChart has no XAxis object.
@property (nonatomic, readonly, strong) ChartXAxis * _Nonnull xAxis;
- (NSInteger)indexForAngle:(CGFloat)angle;

/// \returns  The index of the DataSet this x-index belongs to.
- (NSInteger)dataSetIndexForIndex:(double)xValue;

/// \returns  An integer array of all the different angles the chart slices
/// have the angles in the returned array determine how much space (of 360°)
/// each slice takes
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull drawAngles;

/// \returns  The absolute angles of the different chart slices (where the
/// slices end)
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull absoluteAngles;

/// The color for the hole that is drawn in the center of the PieChart (if enabled).\Note 
///
/// Use holeTransparent with holeColor = nil to make the hole transparent.*
@property (nonatomic, strong) UIColor * _Nullable holeColor;

/// if true, the hole will see-through to the inner tips of the slices
///
/// <em>default</em>: <code>false
/// </code>
@property (nonatomic) BOOL drawSlicesUnderHoleEnabled;

/// \returns  <code>true
/// </code> if the inner tips of the slices are visible behind the hole, <code>false
/// </code> if not.
@property (nonatomic, readonly) BOOL isDrawSlicesUnderHoleEnabled;

/// true if the hole in the center of the pie-chart is set to be visible, false ifnot
@property (nonatomic) BOOL drawHoleEnabled;

/// \returns  <code>true
/// </code> if the hole in the center of the pie-chart is set to be visible, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawHoleEnabled;

/// the text that is displayed in the center of the pie-chart
@property (nonatomic, copy) NSString * _Nullable centerText;

/// the text that is displayed in the center of the pie-chart
@property (nonatomic, strong) NSAttributedString * _Nullable centerAttributedText;

/// Sets the offset the center text should have from it's original position in dp. Default x = 0, y = 0
@property (nonatomic) CGPoint centerTextOffset;

/// true if drawing the center text is enabled
@property (nonatomic) BOOL drawCenterTextEnabled;

/// \returns  <code>true
/// </code> if drawing the center text is enabled
@property (nonatomic, readonly) BOOL isDrawCenterTextEnabled;
@property (nonatomic, readonly) CGFloat radius;

/// \returns  The circlebox, the boundingbox of the pie-chart slices
@property (nonatomic, readonly) CGRect circleBox;

/// \returns  The center of the circlebox
@property (nonatomic, readonly) CGPoint centerCircleBox;

/// the radius of the hole in the center of the piechart in percent of the maximum radius (max = the radius of the whole chart)
///
/// <em>default</em>: 0.5 (50%) (half the pie)
@property (nonatomic) CGFloat holeRadiusPercent;

/// The color that the transparent-circle should have.
///
/// <em>default</em>: <code>nil
/// </code>
@property (nonatomic, strong) UIColor * _Nullable transparentCircleColor;

/// the radius of the transparent circle that is drawn next to the hole in the piechart in percent of the maximum radius (max = the radius of the whole chart)
///
/// <em>default</em>: 0.55 (55%) -> means 5% larger than the center-hole by default
@property (nonatomic) CGFloat transparentCircleRadiusPercent;

/// set this to true to draw the enrty labels into the pie slices
@property (nonatomic) BOOL drawSliceTextEnabled;

/// \returns  <code>true
/// </code> if drawing entry labels is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawSliceTextEnabled;

/// The color the entry labels are drawn with.
@property (nonatomic, strong) UIColor * _Nullable entryLabelColor;

/// The font the entry labels are drawn with.
@property (nonatomic, strong) UIFont * _Nullable entryLabelFont;

/// Set this to true to draw the enrty labels into the pie slices
@property (nonatomic) BOOL drawEntryLabelsEnabled;

/// \returns  <code>true
/// </code> if drawing entry labels is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawEntryLabelsEnabled;

/// If this is enabled, values inside the PieChart are drawn in percent and not with their original value. Values provided for the ValueFormatter to format are then provided in percent.
@property (nonatomic) BOOL usePercentValuesEnabled;

/// \returns  <code>true
/// </code> if drawing x-values is enabled, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isUsePercentValuesEnabled;

/// the rectangular radius of the bounding box for the center text, as a percentage of the pie hole
@property (nonatomic) CGFloat centerTextRadiusPercent;

/// The max angle that is used for calculating the pie-circle. 360 means it's a full pie-chart, 180 results in a half-pie-chart. default: 360.0
@property (nonatomic) CGFloat maxAngle;
@end


SWIFT_CLASS_NAMED("PieRadarHighlighter")
@interface PieRadarChartHighlighter : ChartHighlighter
- (ChartHighlight * _Nullable)getHighlightWithX:(CGFloat)x y:(CGFloat)y;

/// \param index 
///
/// \param x 
///
/// \param y 
///
/// \returns  The closest Highlight object of the given objects based on the touch position inside the chart.
- (ChartHighlight * _Nullable)closestHighlightWithIndex:(NSInteger)index x:(CGFloat)x y:(CGFloat)y;
- (nonnull instancetype)initWithChart:(id <ChartDataProvider> _Nonnull)chart OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PieHighlighter")
@interface PieChartHighlighter : PieRadarChartHighlighter
- (ChartHighlight * _Nullable)closestHighlightWithIndex:(NSInteger)index x:(CGFloat)x y:(CGFloat)y;
- (nonnull instancetype)initWithChart:(id <ChartDataProvider> _Nonnull)chart OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC6Charts14RadarChartData")
@interface RadarChartData : ChartData
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable highlightLineDashLengths;

/// Sets labels that should be drawn around the RadarChart at the end of each web line.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull labels;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSets:(NSArray<id <IChartDataSet>> * _Nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
- (ChartDataEntry * _Nullable)entryForHighlight:(ChartHighlight * _Nonnull)highlight;
@end


SWIFT_CLASS("_TtC6Charts19RadarChartDataEntry")
@interface RadarChartDataEntry : ChartDataEntry
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// \param value The value on the y-axis.
///
/// \param data Spot for additional data this Entry represents.
- (nonnull instancetype)initWithValue:(double)value data:(id _Nullable)data OBJC_DESIGNATED_INITIALIZER;

/// \param value The value on the y-axis.
- (nonnull instancetype)initWithValue:(double)value;
@property (nonatomic) double value;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts17RadarChartDataSet")
@interface RadarChartDataSet : LineRadarChartDataSet <IRadarChartDataSet>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValues:(NSArray<ChartDataEntry *> * _Nullable)values label:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;

/// flag indicating whether highlight circle should be drawn or not default: false
@property (nonatomic) BOOL drawHighlightCircleEnabled;

/// \returns  <code>true
/// </code> if highlight circle should be drawn, <code>false
/// </code> ifnot
@property (nonatomic, readonly) BOOL isDrawHighlightCircleEnabled;
@property (nonatomic, strong) UIColor * _Nullable highlightCircleFillColor;

/// The stroke color for highlight circle. If nil, the color of the dataset is taken.
@property (nonatomic, strong) UIColor * _Nullable highlightCircleStrokeColor;
@property (nonatomic) CGFloat highlightCircleStrokeAlpha;
@property (nonatomic) CGFloat highlightCircleInnerRadius;
@property (nonatomic) CGFloat highlightCircleOuterRadius;
@property (nonatomic) CGFloat highlightCircleStrokeWidth;
@end

@class RadarChartView;

SWIFT_CLASS("_TtC6Charts18RadarChartRenderer")
@interface RadarChartRenderer : LineRadarChartRenderer
@property (nonatomic, weak) RadarChartView * _Nullable chart;
- (nonnull instancetype)initWithChart:(RadarChartView * _Nullable)chart animator:(ChartAnimator * _Nullable)animator viewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;
- (void)drawWebWithContext:(CGContextRef _Nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<ChartHighlight *> * _Nonnull)indices;
@end

@class ChartYAxis;


/// Implementation of the RadarChart, a "spidernet"-like chart. It works best when displaying 5-10 entries per DataSet.
SWIFT_CLASS("_TtC6Charts14RadarChartView")
@interface RadarChartView : PieRadarChartViewBase

/// width of the web lines that come from the center.
@property (nonatomic) CGFloat webLineWidth;

/// width of the web lines that are in between the lines coming from the center
@property (nonatomic) CGFloat innerWebLineWidth;

/// color for the web lines that come from the center
@property (nonatomic, strong) UIColor * _Nonnull webColor;

/// color for the web lines in between the lines that come from the center.
@property (nonatomic, strong) UIColor * _Nonnull innerWebColor;

/// transparency the grid is drawn with (0.0 - 1.0)
@property (nonatomic) CGFloat webAlpha;

/// flag indicating if the web lines should be drawn or not
@property (nonatomic) BOOL drawWeb;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)notifyDataSetChanged;
- (void)drawRect:(CGRect)rect;

/// \returns  The factor that is needed to transform values into pixels.
@property (nonatomic, readonly) CGFloat factor;

/// \returns  The angle that each slice in the radar chart occupies.
@property (nonatomic, readonly) CGFloat sliceAngle;
- (NSInteger)indexForAngle:(CGFloat)angle;

/// \returns  The object that represents all y-labels of the RadarChart.
@property (nonatomic, readonly, strong) ChartYAxis * _Nonnull yAxis;

/// Sets the number of web-lines that should be skipped on chart web before the next one is drawn. This targets the lines that come from the center of the RadarChart. if count = 1 -> 1 line is skipped in between
@property (nonatomic) NSInteger skipWebLineCount;
@property (nonatomic, readonly) CGFloat radius;

/// \returns  The maximum value this chart can display on it's y-axis.
@property (nonatomic, readonly) double chartYMax;

/// \returns  The minimum value this chart can display on it's y-axis.
@property (nonatomic, readonly) double chartYMin;

/// \returns  The range of y-values this chart can display.
@property (nonatomic, readonly) double yRange;
@end


SWIFT_CLASS_NAMED("RadarHighlighter")
@interface RadarChartHighlighter : PieRadarChartHighlighter
- (ChartHighlight * _Nullable)closestHighlightWithIndex:(NSInteger)index x:(CGFloat)x y:(CGFloat)y;
- (nonnull instancetype)initWithChart:(id <ChartDataProvider> _Nonnull)chart OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Range")
@interface ChartRange : NSObject
@property (nonatomic) double from;
@property (nonatomic) double to;
- (nonnull instancetype)initFrom:(double)from to:(double)to OBJC_DESIGNATED_INITIALIZER;

/// \param value 
///
/// \returns  <code>true
/// </code> if this range contains (if the value is in between) the given value, <code>false
/// </code> ifnot.
- (BOOL)contains:(double)value;
- (BOOL)isLarger:(double)value;
- (BOOL)isSmaller:(double)value;
@end




/// Transformer class that contains all matrices and is responsible for transforming values into pixels on the screen and backwards.
SWIFT_CLASS_NAMED("Transformer")
@interface ChartTransformer : NSObject
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nonnull)viewPortHandler OBJC_DESIGNATED_INITIALIZER;

/// Prepares the matrix that transforms values to pixels. Calculates the scale factors from the charts size and offsets.
- (void)prepareMatrixValuePxWithChartXMin:(double)chartXMin deltaX:(CGFloat)deltaX deltaY:(CGFloat)deltaY chartYMin:(double)chartYMin;

/// Prepares the matrix that contains all offsets.
- (void)prepareMatrixOffset:(BOOL)inverted;
- (CGPoint)pixelForValuesWithX:(double)x y:(double)y;

/// \returns  The x and y values in the chart at the given touch point
/// (encapsulated in a CGPoint). This method transforms pixel coordinates to
/// coordinates / values in the chart.
- (CGPoint)valueForTouchPoint:(CGPoint)point;

/// \returns  The x and y values in the chart at the given touch point
/// (x/y). This method transforms pixel coordinates to
/// coordinates / values in the chart.
- (CGPoint)valueForTouchPointWithX:(CGFloat)x y:(CGFloat)y;
@property (nonatomic, readonly) CGAffineTransform valueToPixelMatrix;
@property (nonatomic, readonly) CGAffineTransform pixelToValueMatrix;
@end


@interface UIPanGestureRecognizer (SWIFT_EXTENSION(Charts))
@end


@interface UIPinchGestureRecognizer (SWIFT_EXTENSION(Charts))
@end


@interface UIRotationGestureRecognizer (SWIFT_EXTENSION(Charts))
@end


@interface UIScreen (SWIFT_EXTENSION(Charts))
@end


@interface UITapGestureRecognizer (SWIFT_EXTENSION(Charts))
@end


@interface UIView (SWIFT_EXTENSION(Charts))
@end



/// Class that contains information about the charts current viewport settings, including offsets, scale & translation levels, ...
SWIFT_CLASS_NAMED("ViewPortHandler")
@interface ChartViewPortHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Constructor - don't forget calling setChartDimens(...)
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height OBJC_DESIGNATED_INITIALIZER;
- (void)setChartDimensWithWidth:(CGFloat)width height:(CGFloat)height;
@property (nonatomic, readonly) BOOL hasChartDimens;
- (void)restrainViewPortWithOffsetLeft:(CGFloat)offsetLeft offsetTop:(CGFloat)offsetTop offsetRight:(CGFloat)offsetRight offsetBottom:(CGFloat)offsetBottom;
@property (nonatomic, readonly) CGFloat offsetLeft;
@property (nonatomic, readonly) CGFloat offsetRight;
@property (nonatomic, readonly) CGFloat offsetTop;
@property (nonatomic, readonly) CGFloat offsetBottom;
@property (nonatomic, readonly) CGFloat contentTop;
@property (nonatomic, readonly) CGFloat contentLeft;
@property (nonatomic, readonly) CGFloat contentRight;
@property (nonatomic, readonly) CGFloat contentBottom;
@property (nonatomic, readonly) CGFloat contentWidth;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, readonly) CGRect contentRect;
@property (nonatomic, readonly) CGPoint contentCenter;
@property (nonatomic, readonly) CGFloat chartHeight;
@property (nonatomic, readonly) CGFloat chartWidth;

/// Zooms by the specified zoom factors.
- (CGAffineTransform)zoomWithScaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY;

/// Zooms around the specified center
- (CGAffineTransform)zoomWithScaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY x:(CGFloat)x y:(CGFloat)y;

/// Zooms in by 1.4, x and y are the coordinates (in pixels) of the zoom center.
- (CGAffineTransform)zoomInX:(CGFloat)x y:(CGFloat)y;

/// Zooms out by 0.7, x and y are the coordinates (in pixels) of the zoom center.
- (CGAffineTransform)zoomOutWithX:(CGFloat)x y:(CGFloat)y;

/// Sets the scale factor to the specified values.
- (CGAffineTransform)setZoomWithScaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY;

/// Sets the scale factor to the specified values. x and y is pivot.
- (CGAffineTransform)setZoomWithScaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY x:(CGFloat)x y:(CGFloat)y;

/// Resets all zooming and dragging and makes the chart fit exactly it's bounds.
- (CGAffineTransform)fitScreen;

/// Translates to the specified point.
- (CGAffineTransform)translateWithPt:(CGPoint)pt;

/// Centers the viewport around the specified position (x-index and y-value) in the chart. Centering the viewport outside the bounds of the chart is not possible. Makes most sense in combination with the setScaleMinima(...) method.
- (void)centerViewPortWithPt:(CGPoint)pt chart:(ChartViewBase * _Nonnull)chart;

/// call this method to refresh the graph with a given matrix
- (CGAffineTransform)refreshWithNewMatrix:(CGAffineTransform)newMatrix chart:(ChartViewBase * _Nonnull)chart invalidate:(BOOL)invalidate;

/// Sets the minimum scale factor for the x-axis
- (void)setMinimumScaleX:(CGFloat)xScale;

/// Sets the maximum scale factor for the x-axis
- (void)setMaximumScaleX:(CGFloat)xScale;

/// Sets the minimum and maximum scale factors for the x-axis
- (void)setMinMaxScaleXWithMinScaleX:(CGFloat)minScaleX maxScaleX:(CGFloat)maxScaleX;

/// Sets the minimum scale factor for the y-axis
- (void)setMinimumScaleY:(CGFloat)yScale;

/// Sets the maximum scale factor for the y-axis
- (void)setMaximumScaleY:(CGFloat)yScale;
- (void)setMinMaxScaleYWithMinScaleY:(CGFloat)minScaleY maxScaleY:(CGFloat)maxScaleY;
@property (nonatomic, readonly) CGAffineTransform touchMatrix;
- (BOOL)isInBoundsX:(CGFloat)x;
- (BOOL)isInBoundsY:(CGFloat)y;
- (BOOL)isInBoundsWithX:(CGFloat)x y:(CGFloat)y;
- (BOOL)isInBoundsLeft:(CGFloat)x;
- (BOOL)isInBoundsRight:(CGFloat)x;
- (BOOL)isInBoundsTop:(CGFloat)y;
- (BOOL)isInBoundsBottom:(CGFloat)y;

/// \returns  The current x-scale factor
@property (nonatomic, readonly) CGFloat scaleX;

/// \returns  The current y-scale factor
@property (nonatomic, readonly) CGFloat scaleY;

/// \returns  The minimum x-scale factor
@property (nonatomic, readonly) CGFloat minScaleX;

/// \returns  The minimum y-scale factor
@property (nonatomic, readonly) CGFloat minScaleY;

/// \returns  The minimum x-scale factor
@property (nonatomic, readonly) CGFloat maxScaleX;

/// \returns  The minimum y-scale factor
@property (nonatomic, readonly) CGFloat maxScaleY;

/// \returns  The translation (drag / pan) distance on the x-axis
@property (nonatomic, readonly) CGFloat transX;

/// \returns  The translation (drag / pan) distance on the y-axis
@property (nonatomic, readonly) CGFloat transY;

/// if the chart is fully zoomed out, return true
@property (nonatomic, readonly) BOOL isFullyZoomedOut;

/// \returns  <code>true
/// </code> if the chart is fully zoomed out on it's y-axis (vertical).
@property (nonatomic, readonly) BOOL isFullyZoomedOutY;

/// \returns  <code>true
/// </code> if the chart is fully zoomed out on it's x-axis (horizontal).
@property (nonatomic, readonly) BOOL isFullyZoomedOutX;

/// Set an offset in pixels that allows the user to drag the chart over it's bounds on the x-axis.
- (void)setDragOffsetX:(CGFloat)offset;

/// Set an offset in pixels that allows the user to drag the chart over it's bounds on the y-axis.
- (void)setDragOffsetY:(CGFloat)offset;

/// \returns  <code>true
/// </code> if both drag offsets (x and y) are zero or smaller.
@property (nonatomic, readonly) BOOL hasNoDragOffset;

/// \returns  <code>true
/// </code> if the chart is not yet fully zoomed out on the x-axis
@property (nonatomic, readonly) BOOL canZoomOutMoreX;

/// \returns  <code>true
/// </code> if the chart is not yet fully zoomed in on the x-axis
@property (nonatomic, readonly) BOOL canZoomInMoreX;

/// \returns  <code>true
/// </code> if the chart is not yet fully zoomed out on the y-axis
@property (nonatomic, readonly) BOOL canZoomOutMoreY;

/// \returns  <code>true
/// </code> if the chart is not yet fully zoomed in on the y-axis
@property (nonatomic, readonly) BOOL canZoomInMoreY;
@end


SWIFT_CLASS_NAMED("ViewPortJob")
@interface ChartViewPortJob : NSObject
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nonnull)viewPortHandler xValue:(double)xValue yValue:(double)yValue transformer:(ChartTransformer * _Nonnull)transformer view:(ChartViewBase * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
- (void)doJob;
@end

enum XAxisLabelPosition : NSInteger;

SWIFT_CLASS_NAMED("XAxis")
@interface ChartXAxis : ChartAxisBase

/// width of the x-axis labels in pixels - this is automatically calculated by the computeSize() methods in the renderers
@property (nonatomic) CGFloat labelWidth;

/// height of the x-axis labels in pixels - this is automatically calculated by the computeSize() methods in the renderers
@property (nonatomic) CGFloat labelHeight;

/// width of the (rotated) x-axis labels in pixels - this is automatically calculated by the computeSize() methods in the renderers
@property (nonatomic) CGFloat labelRotatedWidth;

/// height of the (rotated) x-axis labels in pixels - this is automatically calculated by the computeSize() methods in the renderers
@property (nonatomic) CGFloat labelRotatedHeight;

/// This is the angle for drawing the X axis labels (in degrees)
@property (nonatomic) CGFloat labelRotationAngle;

/// if set to true, the chart will avoid that the first and last label entry in the chart "clip" off the edge of the chart
@property (nonatomic) BOOL avoidFirstLastClippingEnabled;

/// the position of the x-labels relative to the chart
@property (nonatomic) enum XAxisLabelPosition labelPosition;

/// if set to true, word wrapping the labels will be enabled. word wrapping is done using (value width * labelRotatedWidth)\Note 
///
/// currently supports all charts except pie/radar/horizontal-bar*
@property (nonatomic) BOOL wordWrapEnabled;

/// \returns  <code>true
/// </code> if word wrapping the labels is enabled
@property (nonatomic, readonly) BOOL isWordWrapEnabled;

/// the width for wrapping the labels, as percentage out of one value width. used only when isWordWrapEnabled = true.
///
/// <em>default</em>: 1.0
@property (nonatomic) CGFloat wordWrapWidthPercent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isAvoidFirstLastClippingEnabled;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XAxisLabelPosition, "LabelPosition") {
  XAxisLabelPositionTop = 0,
  XAxisLabelPositionBottom = 1,
  XAxisLabelPositionBothSided = 2,
  XAxisLabelPositionTopInside = 3,
  XAxisLabelPositionBottomInside = 4,
};


SWIFT_CLASS_NAMED("XAxisRenderer")
@interface ChartXAxisRenderer : ChartAxisRendererBase
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler xAxis:(ChartXAxis * _Nullable)xAxis transformer:(ChartTransformer * _Nullable)transformer OBJC_DESIGNATED_INITIALIZER;
- (void)computeAxisWithMin:(double)min max:(double)max inverted:(BOOL)inverted;
- (void)computeAxisValuesWithMin:(double)min max:(double)max;
- (void)computeSize;
- (void)renderAxisLabelsWithContext:(CGContextRef _Nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef _Nonnull)context;

/// draws the x-labels on the specified y-position
- (void)drawLabelsWithContext:(CGContextRef _Nonnull)context pos:(CGFloat)pos anchor:(CGPoint)anchor;
- (void)drawLabelWithContext:(CGContextRef _Nonnull)context formattedLabel:(NSString * _Nonnull)formattedLabel x:(CGFloat)x y:(CGFloat)y attributes:(NSDictionary<NSString *, NSObject *> * _Nonnull)attributes constrainedToSize:(CGSize)constrainedToSize anchor:(CGPoint)anchor angleRadians:(CGFloat)angleRadians;
- (void)renderGridLinesWithContext:(CGContextRef _Nonnull)context;
@property (nonatomic, readonly) CGRect gridClippingRect;
- (void)drawGridLineWithContext:(CGContextRef _Nonnull)context x:(CGFloat)x y:(CGFloat)y;
- (void)renderLimitLinesWithContext:(CGContextRef _Nonnull)context;
- (void)renderLimitLineLineWithContext:(CGContextRef _Nonnull)context limitLine:(ChartLimitLine * _Nonnull)limitLine position:(CGPoint)position;
- (void)renderLimitLineLabelWithContext:(CGContextRef _Nonnull)context limitLine:(ChartLimitLine * _Nonnull)limitLine position:(CGPoint)position yOffset:(CGFloat)yOffset;
@end


SWIFT_CLASS("_TtC6Charts23XAxisRendererRadarChart")
@interface XAxisRendererRadarChart : ChartXAxisRenderer
@property (nonatomic, weak) RadarChartView * _Nullable chart;
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler xAxis:(ChartXAxis * _Nullable)xAxis chart:(RadarChartView * _Nullable)chart OBJC_DESIGNATED_INITIALIZER;
- (void)renderAxisLabelsWithContext:(CGContextRef _Nonnull)context;
- (void)drawLabelWithContext:(CGContextRef _Nonnull)context formattedLabel:(NSString * _Nonnull)formattedLabel x:(CGFloat)x y:(CGFloat)y attributes:(NSDictionary<NSString *, NSObject *> * _Nonnull)attributes anchor:(CGPoint)anchor angleRadians:(CGFloat)angleRadians;
- (void)renderLimitLinesWithContext:(CGContextRef _Nonnull)context;
@end

enum YAxisLabelPosition : NSInteger;


/// Class representing the y-axis labels settings and its entries. Be aware that not all features the YLabels class provides are suitable for the RadarChart. Customizations that affect the value range of the axis need to be applied before setting data for the chart.
SWIFT_CLASS_NAMED("YAxis")
@interface ChartYAxis : ChartAxisBase

/// indicates if the top y-label entry is drawn or not
@property (nonatomic) BOOL drawTopYLabelEntryEnabled;

/// flag that indicates if the axis is inverted or not
@property (nonatomic) BOOL inverted;

/// flag that indicates if the zero-line should be drawn regardless of other grid lines
@property (nonatomic) BOOL drawZeroLineEnabled;

/// Color of the zero line
@property (nonatomic, strong) UIColor * _Nullable zeroLineColor;

/// Width of the zero line
@property (nonatomic) CGFloat zeroLineWidth;

/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic) CGFloat zeroLineDashPhase;

/// This is the actual dash pattern. I.e. [2, 3] will paint [--   --   ] [1, 3, 4, 2] will paint [-   ----  -   ----  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable zeroLineDashLengths;

/// axis space from the largest value to the top in percent of the total axis range
@property (nonatomic) CGFloat spaceTop;

/// axis space from the smallest value to the bottom in percent of the total axis range
@property (nonatomic) CGFloat spaceBottom;

/// the position of the y-labels relative to the chart
@property (nonatomic) enum YAxisLabelPosition labelPosition;

/// the minimum width that the axis should take
///
/// <em>default</em>: 0.0
@property (nonatomic) CGFloat minWidth;

/// the maximum width that the axis can take. use Infinity for disabling the maximum.
///
/// <em>default</em>: CGFloat.infinity
@property (nonatomic) CGFloat maxWidth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPosition:(enum AxisDependency)position OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) enum AxisDependency axisDependency;
- (CGSize)requiredSize;
- (CGFloat)getRequiredHeightSpace;

/// \returns  <code>true
/// </code> if this axis needs horizontal offset, <code>false
/// </code> ifno offset is needed.
@property (nonatomic, readonly) BOOL needsOffset;
@property (nonatomic, readonly) BOOL isInverted;
- (void)calculateWithMin:(double)dataMin max:(double)dataMax;
@property (nonatomic, readonly) BOOL isDrawTopYLabelEntryEnabled;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, YAxisLabelPosition, "LabelPosition") {
  YAxisLabelPositionOutsideChart = 0,
  YAxisLabelPositionInsideChart = 1,
};


/// Enum that specifies the axis a DataSet should be plotted against, either Left or Right.
typedef SWIFT_ENUM(NSInteger, AxisDependency) {
  AxisDependencyLeft = 0,
  AxisDependencyRight = 1,
};


SWIFT_CLASS_NAMED("YAxisRenderer")
@interface ChartYAxisRenderer : ChartAxisRendererBase
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler yAxis:(ChartYAxis * _Nullable)yAxis transformer:(ChartTransformer * _Nullable)transformer OBJC_DESIGNATED_INITIALIZER;

/// draws the y-axis labels to the screen
- (void)renderAxisLabelsWithContext:(CGContextRef _Nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef _Nonnull)context;
- (void)renderGridLinesWithContext:(CGContextRef _Nonnull)context;
@property (nonatomic, readonly) CGRect gridClippingRect;
- (void)drawGridLineWithContext:(CGContextRef _Nonnull)context position:(CGPoint)position;

/// Draws the zero line at the specified position.
- (void)drawZeroLineWithContext:(CGContextRef _Nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef _Nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts23YAxisRendererRadarChart")
@interface YAxisRendererRadarChart : ChartYAxisRenderer
- (nonnull instancetype)initWithViewPortHandler:(ChartViewPortHandler * _Nullable)viewPortHandler yAxis:(ChartYAxis * _Nullable)yAxis chart:(RadarChartView * _Nullable)chart OBJC_DESIGNATED_INITIALIZER;
- (void)computeAxisValuesWithMin:(double)yMin max:(double)yMax;
- (void)renderAxisLabelsWithContext:(CGContextRef _Nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef _Nonnull)context;
@end

#pragma clang diagnostic pop
